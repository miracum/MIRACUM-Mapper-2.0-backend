---
openapi: 3.0.0
info:
  title: MIRACUM Mapping Tool Backend
  # summary: A MIRACUM Mapping Tool Backend
  description: This is the backend for the MIRACUM Mapping Tool. It provides an API to manage projects with their corresponding mappings. Code Systems can be managed as well. The API uses Keycloak for authentication and authorization.
  # termsOfService: "https://miracum.org"
  # contact:
  #   name: API Support
  #   url: "https://miracum.org"
  #   email: support@miracum.org
  license:
    name: GPL-3.0 License
    # identifier: GPL-3.0-or-later
    url: "https://www.gnu.org/licenses/gpl-3.0.html"
  version: "0.1.0"
servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.miracum.org
    description: Production server
# externalDocs:
#   description: Find out more about Swagger
#   url: http://swagger.io
tags:
  - name: status
    description: Status about the server
    # externalDocs:
    #   description: Find out more
    #   url: http://swagger.io
  - name: project
    description: Operations about projects
  - name: project-permission
    description: Operations about project permissions
  - name: project-codesystem-roles
    description: Operations about the defined systems of a project
  - name: mapping
    description: Operations about mappings
  - name: code-system
    description: Operations about code systems
  - name: concept
    description: Operations about concepts
  - name : import-code-system
    description: Operations about importing code systems
paths:
  /ping:
    get:
      tags:
        - status
      summary: Check if the server is running
      description: This endpoint can be used to check if the server is running. It returns a simple pong message.
      operationId: ping
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "pong"
      security: []
  # /login:
  /projects:
    get:
      tags:
        - project
      summary: Get all projects
      description: Get all projects with pagination. Sorting can also be specified by query parameters.
      operationId: getAllProjects
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - name: sortBy
          in: query
          description: Field to sort sortBy
          required: false
          schema:
            type: string
            default: id
            enum: [name, dateCreated, id]
        - $ref: "#/components/parameters/sortOrder"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Project"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Page not found (e.g., page number too high)
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    post:
      tags:
        - project
      summary: Create a new project
      description: Create a new project with permissions and code system roles (the columns in the mapping table). Code system roles can not be changed after creation.
      parameters: []
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateProjectDetails" # id prohibited/ignored, CodeSystemRoles required, Permissions optional
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectDetails" # id required
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "422":
          description: Validation Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
    put:
      tags:
        - project
      summary: Update the project information
      description: Update the project information. Does not update the permissions for the users or the code system roles (the columns in the mapping table).
      operationId: updateProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateProject"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Exception # validate if id is provided in requestBody, it matches with the id in the path
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /projects/{project_id}:
    get:
      tags:
        - project
      summary: Get project details
      description: Get the project details by ID including the list of project permissions and code system roles (the columns in the mapping table)
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: getProject
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectDetails" # project id optional, permissions required
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    delete:
      tags:
        - project
      summary: Delete a project
      description: Delete a project by ID. This will also delete all mappings and elements of the project as well as the permissions for the project and the code system roles.
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: deleteProject
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
  /projects/{project_id}/permissions:
    get:
      tags:
        - project-permission
      summary: Get permissions for a project
      description: Get all permissions for a project by project ID.
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: getAllPermissions
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ProjectPermission"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    post:
      tags:
        - project-permission
      summary: Create a new project permission for user
      description: Create a new project permission for a user by the user ID.
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: createPermission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SendProjectPermission"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectPermission"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project or user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Exception # e.g if trying to create a permission for a user that already has a permission for the project, or and invalid permission role
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    put:
      tags:
        - project-permission
      summary: Update a project permission for a user
      description: Update a project permission for a user by the user ID
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: updatePermission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SendProjectPermission"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectPermission"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project or user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /projects/{project_id}/permissions/{user_id}:
    get:
      tags:
        - project-permission
      summary: Get project permission for a specific user
      description: Get the project permission for a specific user by the user ID.
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/user_id"
      operationId: getPermission
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectPermission"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project or user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    delete:
      tags:
        - project-permission
      summary: Delete a project permission for a user
      description: Delete a project permission for a user by the user ID
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/user_id"
      operationId: deletePermission
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectPermission"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project or user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /projects/{project_id}/codesystem-roles:
    get:
      tags:
        - project-codesystem-roles
      summary: Get all code system roles for a project
      description: Get all code system roles (columns in the mapping table) for a project by project ID
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: getAllCodeSystemRoles
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CodeSystemRole"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    put:
      tags:
        - project-codesystem-roles
      summary: Update a code system role by ID
      description: Update name or type from a code system role (column in the mapping table) by ID
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: updateCodeSystemRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateCodeSystemRole" # id optional
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeSystemRole" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project or codesystem-role not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description:
            Validation Error # if trying to change the system of the codesystem-role. only name or type of the codesystem-role can be changed
            # if codesystem-role id is provided in the request body and doesn't match the codesystem-role id in the path
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /projects/{project_id}/codesystem-roles/{codesystem-role_id}:
    get:
      tags:
        - project-codesystem-roles
      summary: Get a code system role by ID
      description: Get a code system role (column in the mapping table) by ID
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/codesystem-role_id"
      operationId: getCodeSystemRole
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeSystemRole" # id required
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project or codesystem-role not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /projects/{project_id}/mappings:
    get:
      tags:
        - mapping
      summary: Get all mappings for a project by project ID
      description: Get all mappings for a project by project ID. The mappings include all elements with concepts. Paging and sorting can be specified by query parameters.
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - name: sortBy
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            default: id
            enum: [id, equivalence, status, comment, created, modified]
        - $ref: "#/components/parameters/sortOrder"
      operationId: getAllMappings
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Mapping" # id required
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Page not found (e.g., page number too high)
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    post:
      tags:
        - mapping
      summary: Create a new mapping for a project
      description: Create a new mapping for a project by project ID including all needed elements (specified by code_system_roles from the corresponding project)
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: createMapping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateMapping" # id prohibited/ignored
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Mapping" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    put:
      tags:
        - mapping
      summary: Update a mapping and its elements by their concept IDs
      description: Update a mapping by ID and all included elements by using the corresponding concept IDs.
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: updateMapping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateMapping" # id required
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Mapping" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project or Mapping not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Error # if trying to change the project of the mapping
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    patch:
      tags:
        - mapping
      summary: Update a mapping and its elements by their concept IDs
      description: Update a mapping by ID and all included elements by using the corresponding concept IDs. Missing elements are deleted.
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: patchMapping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateMapping"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Mapping"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project or Mapping not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Error # if trying to change the project of the mapping
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /projects/{project_id}/mappings/{mapping_id}:
    get:
      tags:
        - mapping
      summary: Get a mapping with its elements by ID
      description: Get a mapping by ID and all included elements. The elements include the concept with the system-id.
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/mapping_id"
      operationId: getMapping
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Mapping" # id required
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project or Mapping not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    delete:
      tags:
        - mapping
      summary: Delete a mapping and its elements by ID
      description: Delete a mapping by ID and all included elements.
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/mapping_id"
      operationId: deleteMapping
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Mapping" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project or Mapping not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /codesystems:
    get:
      tags:
        - code-system
      summary: Get all code systems
      description: Get all code systems.
      operationId: getAllCodeSystems
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CodeSystem"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Project or codesystem-role not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    post:
      tags:
        - code-system
      summary: Create a new code system
      description: Create a new code system. Only admins can create code systems.
      operationId: createCodeSystem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateCodeSystem" # id prohibited/ignored
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeSystem" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: CodeSystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
    put:
      tags:
        - code-system
      summary: Update a code system by ID
      description: Update a code system by ID. Only admins can update code systems.
      operationId: updateCodeSystem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CodeSystem" # id optional
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeSystem" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Codesystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Error # if id is provided in the request body it must match the id in the path
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
  /codesystems/{codesystem_id}:
    get:
      tags:
        - code-system
      summary: Get a code system by ID
      description: Get a code system by ID.
      parameters:
        - $ref: "#/components/parameters/codesystem_id"
      operationId: getCodeSystem
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeSystem" # id required
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: CodeSystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    delete:
      tags:
        - code-system
      summary: Delete a code system by ID
      description: Delete a code system by ID. Only admins can delete code systems.
      parameters:
        - $ref: "#/components/parameters/codesystem_id"
      operationId: deleteCodeSystem
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeSystem" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Codesystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
  /codesystems/{codesystem_id}/concepts:
    get:
      tags:
        - concept
      summary: Get all concepts for a code system by ID
      description: Get all concepts for a code system by ID. Paging and sorting can be specified by query parameters.
      operationId: getAllConcepts
      parameters:
        - $ref: "#/components/parameters/codesystem_id"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - name: sortBy
          in: query
          description: Field to sort sortBy
          required: false
          schema:
            type: string
            default: code
            enum: [code, meaning]
        - $ref: "#/components/parameters/sortOrder"
        - name: codeSearch
          in: query
          description: search for the code
          required: false
          schema:
            type: string
        - name: meaningSearch
          in: query
          description: search for meaning
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Concept" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: CodeSystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /import-code-system:
    get:
      tags:
        - import-code-system
      summary: Get all current import jobs
      responses:
        "200":
          description: A list of all import jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ImportJob"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    post:
      tags:
        - import-code-system
      summary: Import a code system from a CSV file
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateCodeSystem"
      responses:
        "200":
          description: Import job created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportJob"
                type: object
                properties:
                  jobId:
                    type: string
                    description: The ID of the created import job
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    put:
      tags:
        - import-code-system
      summary: Update an import job by id
      description: Update the code system information of an ImportJob
      operationId: updateCodeSystem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CodeSystem" # id optional
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ImportJob" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Codesystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Error # if id is provided in the request body it must match the id in the path
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
  /import-code-system/{jobId}:
    get:
      tags:
        - import-code-system
      summary: Get a specific import job by ID
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Details of the specified import job
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportJob"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Import job not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    delete:
      tags:
        - import-code-system
      summary: Delete a specific import job by ID
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Import job deleted successfully
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Import job not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /import-code-system/{jobId}/confirm:
    post:
      tags:
        - import-code-system
      summary: Confirm the import of the code system for the specified job
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Code system import confirmed and start processing
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "404":
          description: Import job not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
components:
  parameters:
    project_id:
      name: project_id
      in: path
      required: true
      description: The ID of the project
      schema:
        type: integer
        format: int32
        minimum: 1
    user_id:
      name: user_id
      in: path
      required: true
      description: The ID of the user
      schema:
        type: string # uuid
    codesystem-role_id:
      name: codesystem-role_id
      in: path
      required: true
      description: The ID of the code system role
      schema:
        type: integer
        format: int32
        minimum: 1
    mapping_id:
      name: mapping_id
      in: path
      required: true
      description: The ID of the mapping
      schema:
        type: integer
        format: int64
        minimum: 1
    codesystem_id:
      name: codesystem_id
      in: path
      required: true
      description: The ID of the Codesystem
      schema:
        type: integer
        format: int32
        minimum: 1
    page:
      name: page
      in: query
      description: Page number (must be a positive integer)
      required: false
      schema:
        type: integer
        default: 1
        minimum: 1
    pageSize:
      name: pageSize
      in: query
      description: Number of items per page (minimum 1, maximum 100)
      required: false
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100
    sortOrder:
      name: sortOrder
      in: query
      description: Order of sorting (asc or desc)
      required: false
      schema:
        type: string
        enum: [asc, desc]
        default: asc
  schemas:
    BaseProject:
      type: object
      required:
        - name
        - version
        - description
        - equivalence_required
        - status_required
      properties:
        name:
          type: string
          example: "Awesome Mapping Project"
        version:
          type: string
          example: "1.0.0"
          description: Semantic versioning
        description:
          type: string
          example: "This is a project to map concepts in an n:m relationship with each other."
        equivalence_required:
          type: boolean
          example: true
          description: If true, the mappings in the project can have an equivalence value, if false, the equivalence value is not allowed
        status_required:
          type: boolean
          example: true
          description: If true, the mappings in the project can have a status value, if false, the status value is not allowed
    UpdateProject:
      allOf:
        - $ref: "#/components/schemas/BaseProject"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int32
              example: 10
              description: The ID of the project (IDs get assigned in a sequential order)
    Project:
      allOf:
        - $ref: "#/components/schemas/UpdateProject"
        - type: object
          required:
            - modified
            - created
          properties:
            modified:
              type: string
              example: "2024-01-01T12:00:00Z"
              description: Date of the last modification of the project
            created:
              type: string
              example: "2024-01-01T11:30:00Z"
              description: Date of the creation of the project
    CreateProjectDetails:
      allOf:
        - $ref: "#/components/schemas/BaseProject"
        - type: object
          required:
            - code_system_roles
          properties:
            project_permissions:
              type: array
              description: List of permissions for the project to create.
              example:
                - user_id: "123e4567-e89b-12d3-a456-426614174000"
                  role: "project_owner"
                - user_id: "123e4567-e89b-12d3-a456-426614174001"
                  role: "editor"
              items:
                $ref: "#/components/schemas/SendProjectPermission"
            code_system_roles:
              type: array
              description: List of code system roles (columns in the mapping table) for the project to create. This specifies which concepts of which code systems can be mapped with each other in the project.
              example:
                - name: "Loinc Codes"
                  system: 1
                  type: "source"
                - name: "Snomed CT Codes"
                  system: 2
                  type: "target"
              items:
                $ref: "#/components/schemas/CreateCodeSystemRole"
    ProjectDetails:
      allOf:
        - $ref: "#/components/schemas/Project"
        - type: object
          required:
            - code_system_roles
          properties:
            project_permissions:
              type: array
              description: List of permissions for the project. This specifies which user has which role in the project.
              example:
                - user_id: "123e4567-e89b-12d3-a456-426614174000"
                  role: "project_owner"
                  user_name: "Example Admin User"
                - user_id: "123e4567-e89b-12d3-a456-426614174001"
                  role: "editor"
                  user_name: "Miracum Mapping Expert"
              items:
                $ref: "#/components/schemas/ProjectPermission"
            code_system_roles:
              type: array
              description: List of code system roles (columns in the mapping table) for the project. This specifies which concepts of which code systems can be mapped with each other in the project.
              example:
                - id: 1
                  name: "Loinc Codes"
                  system:
                    id: 1
                    name: "Loinc"
                    version: "2.68"
                  type: "source"
                - id: 2
                  name: "Snomed CT Codes"
                  system:
                    id: 2
                    name: "Snomed CT"
                    version: "2021-07-31"
                  type: "target"
              items:
                $ref: "#/components/schemas/CodeSystemRole"
    SendProjectPermission:
      type: object
      required:
        - user_id
        - role
      properties:
        user_id:
          type: string
          description: The ID of the user to assign the role to
          example: "123e4567-e89b-12d3-a456-426614174000"
        role:
          type: string
          enum: [reviewer, project_owner, editor]
          description: The role to assign to the user. Reviewer can only view the project and adjust existing mappings, editor can edit the project including the deletion and adding of new mappings, project_owner can edit the project and assign roles to other users.
    ProjectPermission:
      allOf:
        - $ref: "#/components/schemas/SendProjectPermission"
        - type: object
          required:
            - user_name
          properties:
            user_name:
              type: string
              description: The name of the user to assign the role to
              example: "Example Admin User"
    CreateCodeSystemRole:
      type: object
      required:
        - name
        - system
        - type
      properties:
        name:
          type: string
          description: The name of the code system role (column in the mapping table)
          example: "Loinc Codes"
        system:
          type: integer
          format: int32
          description: The reference to the codeSystem to use for the code system role
        type:
          type: string
          enum: [source, target]
          description: The type of the code system. Source is one of n codeSystems from which the concepts are mapped, target is one of m codeSystems to which the concepts are mapped.
    UpdateCodeSystemRole:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          description: The name of the code system role (column in the mapping table)
        type:
          type: string
          enum: [source, target]
          description: The type of the code system. Source is one of n codeSystems from which the concepts are mapped, target is one of m codeSystems to which the concepts are mapped.
    CodeSystemRole:
      allOf:
        - $ref: "#/components/schemas/UpdateCodeSystemRole"
        - type: object
          required:
            - system
          properties:
            system:
              type: object
              required:
                - id
                - name
                - version
              properties:
                id:
                  type: integer
                  format: int32
                  description: The ID of the code system from this code system role
                name:
                  type: string
                  description: The name of the code system from this code system role
                version:
                  type: string
                  description: The version of the code system from this code system role
    CreateMapping:
      type: object
      # required:
      #   - elements
      properties:
        equivalence:
          type: string
          enum:
            [
              related-to,
              equivalent,
              source-is-narrower-than-target,
              source-is-broader-than-target,
              not-related,
            ]
          description: Can only be set if the project allows it (equivalence_required = true). The equivalence describes in which relationship the source concepts stands to the target concepts.
        status:
          type: string
          enum: [active, inactive, pending]
          description: Can only be set if the project allows it (status_required = true). The status describes the current state of the mapping.
        comment:
          type: string
          description: A comment for the mapping
        elements:
          type: array
          items:
            $ref: "#/components/schemas/Element"
          description: List of elements for the mapping. The provided elements have to match to the code system roles of the project.
          example:
            - codeSystemRole: 1
              concept: 1
            - codeSystemRole: 2
              concept: 2
    UpdateMapping:
      allOf:
        - $ref: "#/components/schemas/CreateMapping"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              description: The ID of the mapping
    Mapping:
      allOf:
        - $ref: "#/components/schemas/UpdateMapping"
        - type: object
          required:
            - modified
            - created
            - elements
          properties:
            elements:
              type: array
              items:
                $ref: "#/components/schemas/FullElement"
              description: List of elements for the mapping. Each element includes the concept with their code and meaning
              example:
                - codeSystemRole: 2
                  concept:
                    id: 1
                    code: "1234-5"
                    meaning: "Example Concept"
                - codeSystemRole: 1
                  concept:
                    id: 2
                    code: "1234-6"
                    meaning: "Another Example Concept"
            created:
              type: string
              description: Date of the creation of the mapping
              example: "2024-01-01T11:30:00Z"
            modified:
              type: string
              description: Date of the last modification of the mapping
              example: "2024-01-01T12:00:00Z"
    Element:
      properties:
        codeSystemRole:
          type: integer
          format: int32
          description: The ID of the code system role (column in the mapping table)
        concept:
          type: integer
          format: int64
          description: The ID of the concept
    FullElement:
      allOf:
        - $ref: "#/components/schemas/Element"
        - type: object
          properties:
            concept:
              $ref: "#/components/schemas/Concept"
              description: The concept with their code and meaning
    Concept:
      type: object
      required:
        - id
        - code
        - meaning
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the concept
        code:
          type: string
          description: The code of the concept defined by the code system
        meaning:
          type: string
          description: The meaning of the concept
    CreateCodeSystem:
      type: object
      required:
        - uri
        - version
        - name
      properties:
        uri:
          type: string
          description: The Uniform Resource Identifier (URI) of the code system
          example: "http://loinc.org"
        version:
          type: string
          description: The version of the code system
          example: "2.68"
        name:
          type: string
          description: The name of the code system
          example: "Loinc"
        title:
          type: string
          description: The title of the code system
          example: "Logical Observation Identifiers Names and Codes"
        description:
          type: string
          description: The description of the code system
          example: "LOINC is a database and universal standard for identifying medical laboratory observations"
        author:
          type: string
          description: The author of the code system
          example: "Regenstrief Institute"
    CodeSystem:
      allOf:
        - $ref: "#/components/schemas/CreateCodeSystem"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int32
              description: The ID of the code system
    ErrorResponse:
      type: string
    ImportJob:
      type: object
      required:
        - id
        - status
        - codesystemType
        - codeSystem
      properties:
        id:
          type: string
          description: Unique identifier for the import job
        status:
          type: string
          enum: [progress, done, failed]
          description: Current status of the job
        numReadLines:
          type: integer
          description: Number of lines read from the CSV file
        hash:
          type: string
          description: Hash of the CSV file content
        detectedColumns:
          type: array
          items:
            type: string
          description: List of columns detected in the CSV file
        codesystemType:
          type: string
          description: The type of the codesystem
        errorMessage:
          type: string
          description: If the job failed, this field contains the error message
        codeSystem:
          $ref: "#/components/schemas/CodeSystem"
          description: The code system to import
  responses:
    #   UnauthorizedError:
    #     description: Unauthorized
    #     content:
    #       application/json:
    #         schema:
    #           $ref: "#/components/schemas/Error"
    BadRequestError:
      description: Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
      content:
        application/json:
          schema:
            type: string
    InternalServerError:
      description: Internal Server Error due to database or implementation errors
      content:
        application/json:
          schema:
            type: string
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://<keycloak-url>/auth/realms/<realm-name>/protocol/openid-connect/auth
          tokenUrl: https://<keycloak-url>/auth/realms/<realm-name>/protocol/openid-connect/token
          scopes:
            admin: grants admin access
            member: grants normal access
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
security:
  - OAuth2: [normal, admin]
  - BearerAuth: [normal, admin]
