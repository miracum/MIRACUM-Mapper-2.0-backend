---
openapi: 3.0.0
info:
  title: MIRACUM Mapping Tool Backend
  # summary: A MIRACUM Mapping Tool Backend
  description: This is the backend for the MIRACUM Mapping Tool. It provides an API to manage projects with their corresponding mappings. Code Systems can be managed as well. The API uses Keycloak for authentication and authorization.
  # termsOfService: "https://miracum.org"
  # contact:
  #   name: API Support
  #   url: "https://miracum.org"
  #   email: support@miracum.org
  license:
    name: GPL-3.0 License
    # identifier: GPL-3.0-or-later
    url: "https://www.gnu.org/licenses/gpl-3.0.html"
  version: "1.0.0"
# servers:
#   - url: http://localhost:8080
#     description: Development server
#   - url: https://api.miracum.org
#     description: Production server
# externalDocs:
#   description: Find out more about Swagger
#   url: http://swagger.io
tags:
  - name: status
    description: Status about the server
    # externalDocs:
    #   description: Find out more
    #   url: http://swagger.io
  - name: project
    description: Operations about projects
  - name: project-permission
    description: Operations about project permissions
  - name: project-codesystem-roles
    description: Operations about the defined systems of a project
  - name: mapping
    description: Operations about mappings
  - name: user
    description: Operations about users
  - name: code-system
    description: Operations about code systems
  - name: code-system-version
    description: Operations about code system versions
  - name: concept
    description: Operations about concepts
paths:
  /ping:
    get:
      tags:
        - status
      summary: Check if the server is running
      description: This endpoint can be used to check if the server is running. It returns a simple pong message.
      operationId: ping
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "pong"
      security: []
  /projects:
    get:
      tags:
        - project
      summary: Get all projects
      description: Get all projects with pagination. Sorting can also be specified by query parameters.
      operationId: getAllProjects
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - name: sortBy
          in: query
          description: Field to sort sortBy
          required: false
          schema:
            type: string
            default: id
            enum: [name, dateCreated, id]
        - $ref: "#/components/parameters/sortOrder"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Project"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "404":
          description: Page not found (e.g., page number too high)
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    post:
      tags:
        - project
      summary: Create a new project
      description: Create a new project with permissions and code system roles (the columns in the mapping table). Code system roles can not be changed after creation.
      parameters: []
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateProjectDetails" # id prohibited/ignored, CodeSystemRoles required, Permissions optional
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectDetails" # id required
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "422":
          description: Validation Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
    put:
      tags:
        - project
      summary: Update the project information
      description: Update the project information. Does not update the permissions for the users or the code system roles (the columns in the mapping table).
      operationId: updateProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateProject"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Exception # validate if id is provided in requestBody, it matches with the id in the path
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /projects/{project_id}:
    get:
      tags:
        - project
      summary: Get project details
      description: Get the project details by ID including the list of project permissions and code system roles (the columns in the mapping table)
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: getProject
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectDetails" # project id optional, permissions required
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    delete:
      tags:
        - project
      summary: Delete a project
      description: Delete a project by ID. This will also delete all mappings and elements of the project as well as the permissions for the project and the code system roles.
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: deleteProject
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
  /projects/{project_id}/permissions:
    get:
      tags:
        - project-permission
      summary: Get permissions for a project
      description: Get all permissions for a project by project ID.
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: getAllPermissions
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ProjectPermission"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    post:
      tags:
        - project-permission
      summary: Create a new project permission for user
      description: Create a new project permission for a user by the user ID.
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: createPermission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SendProjectPermission"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectPermission"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project or user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Exception # e.g if trying to create a permission for a user that already has a permission for the project, or and invalid permission role
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    put:
      tags:
        - project-permission
      summary: Update a project permission for a user
      description: Update a project permission for a user by the user ID
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: updatePermission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SendProjectPermission"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectPermission"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project or user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /projects/{project_id}/permissions/{user_id}:
    get:
      tags:
        - project-permission
      summary: Get project permission for a specific user
      description: Get the project permission for a specific user by the user ID.
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/user_id"
      operationId: getPermission
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectPermission"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project or user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    delete:
      tags:
        - project-permission
      summary: Delete a project permission for a user
      description: Delete a project permission for a user by the user ID
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/user_id"
      operationId: deletePermission
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectPermission"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project or user not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /projects/{project_id}/codesystem-roles:
    get:
      tags:
        - project-codesystem-roles
      summary: Get all code system roles for a project
      description: Get all code system roles (columns in the mapping table) for a project by project ID
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: getAllCodeSystemRoles
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CodeSystemRole"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    put:
      tags:
        - project-codesystem-roles
      summary: Update a code system role by ID
      description: Update name or type from a code system role (column in the mapping table) by ID
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: updateCodeSystemRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateCodeSystemRole" # id optional
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeSystemRole" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project or codesystem-role not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description:
            Validation Error # if trying to change the system of the codesystem-role. only name or type of the codesystem-role can be changed
            # if codesystem-role id is provided in the request body and doesn't match the codesystem-role id in the path
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /projects/{project_id}/codesystem-roles/{codesystem-role_id}:
    get:
      tags:
        - project-codesystem-roles
      summary: Get a code system role by ID
      description: Get a code system role (column in the mapping table) by ID
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/codesystem-role_id"
      operationId: getCodeSystemRole
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeSystemRole" # id required
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project or codesystem-role not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /projects/{project_id}/mappings:
    get:
      tags:
        - mapping
      summary: Get all mappings for a project by project ID
      description: Get all mappings for a project by project ID. The mappings include all elements with concepts. Paging and sorting can be specified by query parameters.
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - name: sortBy
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            default: id
            enum: [id, equivalence, status, comment, created, modified]
        - $ref: "#/components/parameters/sortOrder"
      operationId: getAllMappings
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Mapping" # id required
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Page not found (e.g., page number too high)
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    post:
      tags:
        - mapping
      summary: Create a new mapping for a project
      description: Create a new mapping for a project by project ID including all needed elements (specified by code_system_roles from the corresponding project)
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: createMapping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateMapping" # id prohibited/ignored
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Mapping" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    put:
      tags:
        - mapping
      summary: Update a mapping and its elements by their concept IDs
      description: Update a mapping by ID and all included elements by using the corresponding concept IDs.
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: updateMapping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateMapping" # id required
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Mapping" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project or Mapping not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Error # if trying to change the project of the mapping
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    patch:
      tags:
        - mapping
      summary: Update a mapping and its elements by their concept IDs
      description: Update a mapping by ID and all included elements by using the corresponding concept IDs. Missing elements are deleted.
      parameters:
        - $ref: "#/components/parameters/project_id"
      operationId: patchMapping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateMapping"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Mapping"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project or Mapping not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Error # if trying to change the project of the mapping
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /projects/{project_id}/mappings/{mapping_id}:
    get:
      tags:
        - mapping
      summary: Get a mapping with its elements by ID
      description: Get a mapping by ID and all included elements. The elements include the concept with the system-id.
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/mapping_id"
      operationId: getMapping
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Mapping" # id required
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project or Mapping not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    delete:
      tags:
        - mapping
      summary: Delete a mapping and its elements by ID
      description: Delete a mapping by ID and all included elements.
      parameters:
        - $ref: "#/components/parameters/project_id"
        - $ref: "#/components/parameters/mapping_id"
      operationId: deleteMapping
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Mapping" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "403":
          "$ref": "#/components/responses/ForbiddenError"
        "404":
          description: Project or Mapping not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /users:
    get:
      tags:
        - user
      summary: Get all users
      description: Get all users.
      operationId: getAllUsers
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/User"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /users/{user_id}:
    delete:
      tags:
        - user
      summary: Delete a user
      description: Delete a user by ID. This will also delete all the permissions, the user has for the project.
      parameters:
        - $ref: "#/components/parameters/user_id"
      operationId: deleteUser
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
  /users/login:
    post:
      tags:
        - user
      summary: Updates user-database with information from Access-Token
      operationId: login
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /codesystems:
    get:
      tags:
        - code-system
      summary: Get all code systems
      description: Get all code systems.
      operationId: getAllCodeSystems
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/GetCodeSystem"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    post:
      tags:
        - code-system
      summary: Create a new code system
      description: Create a new code system. Only admins can create code systems.
      operationId: createCodeSystem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateCodeSystem" # id prohibited/ignored
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetCodeSystem" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "404":
          description: CodeSystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
    put:
      tags:
        - code-system
      summary: Update a code system by ID
      description: Update a code system by ID. Only admins can update code systems.
      operationId: updateCodeSystem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CodeSystem" # id optional
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetCodeSystem" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "404":
          description: Codesystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Error # if id is provided in the request body it must match the id in the path
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
  /codesystems/{codesystem_id}:
    get:
      tags:
        - code-system
      summary: Get a code system by ID
      description: Get a code system by ID.
      parameters:
        - $ref: "#/components/parameters/codesystem_id"
      operationId: getCodeSystem
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetCodeSystem" # id required
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "404":
          description: CodeSystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
    delete:
      tags:
        - code-system
      summary: Delete a code system by ID
      description: Delete a code system by ID. Only admins can delete code systems.
      parameters:
        - $ref: "#/components/parameters/codesystem_id"
      operationId: deleteCodeSystem
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetCodeSystem" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "404":
          description: Codesystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
  /codesystems/{codesystem_id}/versions:
    post:
      tags:
        - code-system-version
      summary: Create a new version for a code system by ID
      description: Create a new version for a code system by ID. Only admins can create code system versions.
      parameters:
        - $ref: "#/components/parameters/codesystem_id"
      operationId: createCodeSystemVersion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BaseCodeSystemVersion"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeSystemVersion"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "404":
          description: CodeSystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
    put:
      tags:
        - code-system-version
      summary: Update a code system version by ID
      description: Update a code system version by ID. Only admins can update code system versions.
      parameters:
        - $ref: "#/components/parameters/codesystem_id"
      operationId: updateCodeSystemVersion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CodeSystemVersion"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeSystemVersion"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "404":
          description: CodeSystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
  /codesystems/{codesystem_id}/versions/{codesystem-version_id}:
    delete:
      tags:
        - code-system-version
      summary: Delete a code system version by ID
      description: Delete a code system version by ID. Only admins can delete code system versions.
      parameters:
        - $ref: "#/components/parameters/codesystem_id"
        - $ref: "#/components/parameters/codesystem-version_id"
      operationId: deleteCodeSystemVersion
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeSystemVersion"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "404":
          description: CodeSystem or CodeSystemVersion not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
  /codesystems/{codesystem_id}/versions/{codesystem-version_id}/import:
    post:
      tags:
        - code-system-version
      summary: Import concepts for a code system version by ID
      description: Import concepts for a code system version by ID. The concepts are imported from a CSV file. The format of the CSV must be "code,meaning"
      parameters:
        - $ref: "#/components/parameters/codesystem_id"
        - $ref: "#/components/parameters/codesystem-version_id"
      operationId: importCodeSystemVersion
      requestBody:
        required: true
        content:
          text/csv:
            schema:
              type: string
              example: |
                code,meaning
                123,test meaning 1
                456,another meaning
                789,third meaning
      responses:
        "202":
          description: Success
          content:
            application/json:
              schema:
                type: string
                example: "CSV is in the correct format. Start importing concepts now"
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "404":
          description: CodeSystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
      security:
        - OAuth2: [admin]
        - BearerAuth: [admin]
  /codesystems/{codesystem_id}/concepts:
    get:
      tags:
        - concept
      summary: Get all concepts for a code system by ID
      description: Get all concepts for a code system by ID. Paging and sorting can be specified by query parameters.
      operationId: getAllConcepts
      parameters:
        - $ref: "#/components/parameters/codesystem_id"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - name: sortBy
          in: query
          description: Field to sort sortBy
          required: false
          schema:
            type: string
            default: code
            enum: [code, meaning]
        - $ref: "#/components/parameters/sortOrder"
        - name: codeSearch
          in: query
          description: search for the code
          required: false
          schema:
            type: string
        - name: meaningSearch
          in: query
          description: search for meaning
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Concept" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "404":
          description: CodeSystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
  /codesystems/{codesystem_id}/versions/{codesystem-version_id}/concepts:
    get:
      tags:
        - concept
      summary: Get all concepts for a code system version by ID
      description: Get all concepts for a code system version by ID. Paging and sorting can be specified by query parameters.
      operationId: getAllConceptsByVersion
      parameters:
        - $ref: "#/components/parameters/codesystem_id"
        - $ref: "#/components/parameters/codesystem-version_id"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - name: sortBy
          in: query
          description: Field to sort sortBy
          required: false
          schema:
            type: string
            default: code
            enum: [code, meaning]
        - $ref: "#/components/parameters/sortOrder"
        - name: codeSearch
          in: query
          description: search for the code
          required: false
          schema:
            type: string
        - name: meaningSearch
          in: query
          description: search for meaning
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Concept" # id optional
        "400":
          "$ref": "#/components/responses/BadRequestError"
        "401":
          "$ref": "#/components/responses/UnauthorizedError"
        "404":
          description: CodeSystem not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        "500":
          "$ref": "#/components/responses/InternalServerError"
components:
  parameters:
    project_id:
      name: project_id
      in: path
      required: true
      description: The ID of the project
      schema:
        type: integer
        format: int32
        minimum: 1
    user_id:
      name: user_id
      in: path
      required: true
      description: The ID of the user
      schema:
        type: string # uuid
    codesystem-role_id:
      name: codesystem-role_id
      in: path
      required: true
      description: The ID of the code system role
      schema:
        type: integer
        format: int32
        minimum: 1
    mapping_id:
      name: mapping_id
      in: path
      required: true
      description: The ID of the mapping
      schema:
        type: integer
        format: int64
        minimum: 1
    codesystem_id:
      name: codesystem_id
      in: path
      required: true
      description: The ID of the Codesystem
      schema:
        type: integer
        format: int32
        minimum: 1
    codesystem-version_id:
      name: codesystem-version_id
      in: path
      required: true
      description: The ID of the Codesystem Version
      schema:
        type: integer
        format: int32
        minimum: 1
    page:
      name: page
      in: query
      description: Page number (must be a positive integer)
      required: false
      schema:
        type: integer
        default: 1
        minimum: 1
    pageSize:
      name: pageSize
      in: query
      description: Number of items per page (minimum 1, maximum 100)
      required: false
      schema:
        type: integer
        default: 100000
        minimum: 1
    sortOrder:
      name: sortOrder
      in: query
      description: Order of sorting (asc or desc)
      required: false
      schema:
        type: string
        enum: [asc, desc]
        default: asc
  schemas:
    BaseProject:
      type: object
      required:
        - name
        - version
        - description
        - equivalence_required
        - status_required
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        equivalence_required:
          type: boolean
        status_required:
          type: boolean
    UpdateProject:
      allOf:
        - $ref: "#/components/schemas/BaseProject"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int32
    Project:
      allOf:
        - $ref: "#/components/schemas/UpdateProject"
        - type: object
          required:
            - modified
            - created
          properties:
            modified:
              type: string
            created:
              type: string
    CreateProjectDetails:
      allOf:
        - $ref: "#/components/schemas/BaseProject"
        - type: object
          required:
            - code_system_roles
            - project_permissions
          properties:
            project_permissions:
              type: array
              items:
                $ref: "#/components/schemas/SendProjectPermission"
            code_system_roles:
              type: array
              items:
                $ref: "#/components/schemas/CreateCodeSystemRole"
    ProjectDetails:
      allOf:
        - $ref: "#/components/schemas/Project"
        - type: object
          required:
            - code_system_roles
          properties:
            project_permissions:
              type: array
              items:
                $ref: "#/components/schemas/ProjectPermission"
            code_system_roles:
              type: array
              items:
                $ref: "#/components/schemas/CodeSystemRole"
    Role:
      type: string
      enum: [reviewer, project_owner, editor]
    SendProjectPermission:
      type: object
      required:
        - user_id
        - role
      properties:
        user_id:
          type: string # uuid
        role:
          $ref: "#/components/schemas/Role"
    ProjectPermission:
      type: object
      required:
        - user
        - role
      properties:
        user:
          $ref: "#/components/schemas/User"
        role:
          $ref: "#/components/schemas/Role"
    CreateCodeSystemRole:
      type: object
      required:
        - name
        - system
        - version
        - type
      properties:
        name:
          type: string
        system:
          type: integer
          format: int32
        version:
          type: integer
          format: int32
        type:
          type: string
          enum: [source, target]
    UpdateCodeSystemRole:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        type:
          type: string
          enum: [source, target]
    CodeSystemRole:
      allOf:
        - $ref: "#/components/schemas/UpdateCodeSystemRole"
        - type: object
          required:
            - system
          properties:
            system:
              type: object
              required:
                - id
                - name
                - version
              properties:
                id:
                  type: integer
                  format: int32
                name:
                  type: string
                version:
                  type: string
                nextVersion:
                  type: string
    CreateMapping:
      type: object
      # required:
      #   - elements
      properties:
        equivalence:
          type: string
          enum:
            [
              related-to,
              equivalent,
              source-is-narrower-than-target,
              source-is-broader-than-target,
              not-related,
            ]
        status:
          type: string
          enum: [active, inactive, pending]
        comment:
          type: string
        elements:
          type: array
          items:
            $ref: "#/components/schemas/Element"
    UpdateMapping:
      allOf:
        - $ref: "#/components/schemas/CreateMapping"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
    Mapping:
      allOf:
        - $ref: "#/components/schemas/UpdateMapping"
        - type: object
          required:
            - modified
            - created
            - elements
          properties:
            elements:
              type: array
              items:
                $ref: "#/components/schemas/FullElement"
            created:
              type: string
            modified:
              type: string
    Element:
      properties:
        codeSystemRole:
          type: integer
          format: int32
        concept:
          type: integer
          format: int64
    FullElement:
      allOf:
        - $ref: "#/components/schemas/Element"
        - type: object
          properties:
            concept:
              $ref: "#/components/schemas/Concept"
            nextConcept:
              $ref: "#/components/schemas/Concept"
    User:
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: string
        fullname:
          type: string
        username:
          type: string
        email:
          type: string
    Concept:
      type: object
      required:
        - id
        - code
        - meaning
        - status
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        meaning:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [active, trial, deprecated, discouraged]
    BaseCodeSystem:
      type: object
      required:
        - uri
        - name
      properties:
        uri:
          type: string
        name:
          type: string
        title:
          type: string
        description:
          type: string
        author:
          type: string
    CreateCodeSystem:
      allOf:
        - $ref: "#/components/schemas/BaseCodeSystem"
    CodeSystem:
      allOf:
        - $ref: "#/components/schemas/CreateCodeSystem"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int32
    GetCodeSystem:
      allOf:
        - $ref: "#/components/schemas/CodeSystem"
        - type: object
          required:
            - versions
          properties:
            versions:
              type: array
              items:
                $ref: "#/components/schemas/CodeSystemVersion"
    BaseCodeSystemVersion:
      type: object
      required:
        - version_name
        - release_date
      properties:
        version_name:
          type: string
        release_date:
          type: string
          format: date
    CodeSystemVersion:
      allOf:
        - $ref: "#/components/schemas/BaseCodeSystemVersion"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int32
              minimum: 1
    ErrorResponse:
      type: string
  responses:
    #   UnauthorizedError:
    #     description: Unauthorized
    #     content:
    #       application/json:
    #         schema:
    #           $ref: "#/components/schemas/Error"
    BadRequestError:
      description: Invalid Request (e.g., negative id supplied, invalid body (e.g. missing field) or query parameters)
      content:
        application/json:
          schema:
            type: string
    InternalServerError:
      description: Internal Server Error due to database or implementation errors
      content:
        application/json:
          schema:
            type: string
    UnauthorizedError:
      description: Unauthorized (missing or invalid credentials)
      content:
        application/json:
          schema:
            type: string
    ForbiddenError:
      description: Forbidden (insufficient permissions)
      content:
        application/json:
          schema:
            type: string

  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:8081/auth/realms/master/protocol/openid-connect/auth
          tokenUrl: http://localhost:8081/auth/realms/master/protocol/openid-connect/token
          scopes:
            admin: grants admin access
            member: grants normal access
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
security:
  # - OAuth2: [normal, admin]
  - BearerAuth: [normal, admin]
