// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a code system by ID
	// (DELETE /code-system/{code-system_id})
	DeleteCodeSystem(c *gin.Context, codeSystemId CodeSystemId)
	// Get a code system by ID
	// (GET /code-system/{code-system_id})
	GetCodeSystem(c *gin.Context, codeSystemId CodeSystemId)
	// Update a code system by ID
	// (PUT /code-system/{code-system_id})
	UpdateCodeSystem(c *gin.Context, codeSystemId CodeSystemId)
	// Get all concepts for a code system by ID
	// (GET /code-system/{code-system_id}/concepts)
	GetAllConcepts(c *gin.Context, codeSystemId CodeSystemId, params GetAllConceptsParams)
	// Find a concept by code or meaning
	// (GET /code-system/{code-system_id}/find-concept)
	FindConceptByCode(c *gin.Context, codeSystemId CodeSystemId, params FindConceptByCodeParams)
	// Get all code systems
	// (GET /code-systems)
	GetAllCodeSystems(c *gin.Context)
	// Create a new code system
	// (POST /code-systems)
	AddCodeSystem(c *gin.Context)
	// Check if the server is running
	// (GET /ping)
	Ping(c *gin.Context)
	// Delete a project
	// (DELETE /project/{project_id})
	DeleteProject(c *gin.Context, projectId ProjectId)
	// Get project details
	// (GET /project/{project_id})
	GetProject(c *gin.Context, projectId ProjectId)
	// Update the project information
	// (PUT /project/{project_id})
	EditProject(c *gin.Context, projectId ProjectId)
	// Get all code system roles for a project
	// (GET /project/{project_id}/code-system-roles)
	GetAllCodeSystemRoles(c *gin.Context, projectId ProjectId)
	// Get a code system role by ID
	// (GET /project/{project_id}/code-system-roles/{code-system-role_id})
	GetCodeSystemRole(c *gin.Context, projectId ProjectId, codeSystemRoleId CodeSystemRoleId)
	// Update a code system role by ID
	// (PUT /project/{project_id}/code-system-roles/{code-system-role_id})
	UpdateCodeSystemRole(c *gin.Context, projectId ProjectId, codeSystemRoleId CodeSystemRoleId)
	// Delete a mapping and its elements by ID
	// (DELETE /project/{project_id}/mapping/{mapping_id})
	DeleteMapping(c *gin.Context, projectId ProjectId, mappingId MappingId)
	// Get a mapping with its elements by ID
	// (GET /project/{project_id}/mapping/{mapping_id})
	GetMappingByID(c *gin.Context, projectId ProjectId, mappingId MappingId)
	// Update a mapping and its elements by ID
	// (PUT /project/{project_id}/mapping/{mapping_id})
	UpdateMapping(c *gin.Context, projectId ProjectId, mappingId MappingId)
	// Get all mappings for a project by project ID
	// (GET /project/{project_id}/mappings)
	GetAllMappings(c *gin.Context, projectId ProjectId, params GetAllMappingsParams)
	// Create a new mapping for a project
	// (POST /project/{project_id}/mappings)
	AddMapping(c *gin.Context, projectId ProjectId)
	// Get permissions for a project
	// (GET /project/{project_id}/permissions)
	GetAllPermissions(c *gin.Context, projectId ProjectId)
	// Delete a project permission for a user
	// (DELETE /project/{project_id}/permissions/{user_id})
	DeletePermission(c *gin.Context, projectId ProjectId, userId UserId)
	// Get project permission for a specific user
	// (GET /project/{project_id}/permissions/{user_id})
	GetPermission(c *gin.Context, projectId ProjectId, userId UserId)
	// Create a new project permission for user
	// (POST /project/{project_id}/permissions/{user_id})
	AddPermission(c *gin.Context, projectId ProjectId, userId UserId)
	// Update a project permission for a user
	// (PUT /project/{project_id}/permissions/{user_id})
	UpdatePermission(c *gin.Context, projectId ProjectId, userId UserId)
	// Get all projects
	// (GET /projects)
	GetProjects(c *gin.Context, params GetProjectsParams)
	// Create a new project
	// (POST /projects)
	AddProject(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteCodeSystem operation middleware
func (siw *ServerInterfaceWrapper) DeleteCodeSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "code-system_id" -------------
	var codeSystemId CodeSystemId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system_id", c.Param("code-system_id"), &codeSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCodeSystem(c, codeSystemId)
}

// GetCodeSystem operation middleware
func (siw *ServerInterfaceWrapper) GetCodeSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "code-system_id" -------------
	var codeSystemId CodeSystemId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system_id", c.Param("code-system_id"), &codeSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCodeSystem(c, codeSystemId)
}

// UpdateCodeSystem operation middleware
func (siw *ServerInterfaceWrapper) UpdateCodeSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "code-system_id" -------------
	var codeSystemId CodeSystemId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system_id", c.Param("code-system_id"), &codeSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCodeSystem(c, codeSystemId)
}

// GetAllConcepts operation middleware
func (siw *ServerInterfaceWrapper) GetAllConcepts(c *gin.Context) {

	var err error

	// ------------- Path parameter "code-system_id" -------------
	var codeSystemId CodeSystemId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system_id", c.Param("code-system_id"), &codeSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllConceptsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllConcepts(c, codeSystemId, params)
}

// FindConceptByCode operation middleware
func (siw *ServerInterfaceWrapper) FindConceptByCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "code-system_id" -------------
	var codeSystemId CodeSystemId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system_id", c.Param("code-system_id"), &codeSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindConceptByCodeParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "codeSearch" -------------

	err = runtime.BindQueryParameter("form", true, false, "codeSearch", c.Request.URL.Query(), &params.CodeSearch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codeSearch: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "meaningSearch" -------------

	err = runtime.BindQueryParameter("form", true, false, "meaningSearch", c.Request.URL.Query(), &params.MeaningSearch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter meaningSearch: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FindConceptByCode(c, codeSystemId, params)
}

// GetAllCodeSystems operation middleware
func (siw *ServerInterfaceWrapper) GetAllCodeSystems(c *gin.Context) {

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllCodeSystems(c)
}

// AddCodeSystem operation middleware
func (siw *ServerInterfaceWrapper) AddCodeSystem(c *gin.Context) {

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddCodeSystem(c)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Ping(c)
}

// DeleteProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProject(c, projectId)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProject(c, projectId)
}

// EditProject operation middleware
func (siw *ServerInterfaceWrapper) EditProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EditProject(c, projectId)
}

// GetAllCodeSystemRoles operation middleware
func (siw *ServerInterfaceWrapper) GetAllCodeSystemRoles(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllCodeSystemRoles(c, projectId)
}

// GetCodeSystemRole operation middleware
func (siw *ServerInterfaceWrapper) GetCodeSystemRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "code-system-role_id" -------------
	var codeSystemRoleId CodeSystemRoleId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system-role_id", c.Param("code-system-role_id"), &codeSystemRoleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system-role_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCodeSystemRole(c, projectId, codeSystemRoleId)
}

// UpdateCodeSystemRole operation middleware
func (siw *ServerInterfaceWrapper) UpdateCodeSystemRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "code-system-role_id" -------------
	var codeSystemRoleId CodeSystemRoleId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system-role_id", c.Param("code-system-role_id"), &codeSystemRoleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system-role_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCodeSystemRole(c, projectId, codeSystemRoleId)
}

// DeleteMapping operation middleware
func (siw *ServerInterfaceWrapper) DeleteMapping(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "mapping_id" -------------
	var mappingId MappingId

	err = runtime.BindStyledParameterWithOptions("simple", "mapping_id", c.Param("mapping_id"), &mappingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mapping_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMapping(c, projectId, mappingId)
}

// GetMappingByID operation middleware
func (siw *ServerInterfaceWrapper) GetMappingByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "mapping_id" -------------
	var mappingId MappingId

	err = runtime.BindStyledParameterWithOptions("simple", "mapping_id", c.Param("mapping_id"), &mappingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mapping_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMappingByID(c, projectId, mappingId)
}

// UpdateMapping operation middleware
func (siw *ServerInterfaceWrapper) UpdateMapping(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "mapping_id" -------------
	var mappingId MappingId

	err = runtime.BindStyledParameterWithOptions("simple", "mapping_id", c.Param("mapping_id"), &mappingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mapping_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateMapping(c, projectId, mappingId)
}

// GetAllMappings operation middleware
func (siw *ServerInterfaceWrapper) GetAllMappings(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllMappingsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllMappings(c, projectId, params)
}

// AddMapping operation middleware
func (siw *ServerInterfaceWrapper) AddMapping(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddMapping(c, projectId)
}

// GetAllPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetAllPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllPermissions(c, projectId)
}

// DeletePermission operation middleware
func (siw *ServerInterfaceWrapper) DeletePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePermission(c, projectId, userId)
}

// GetPermission operation middleware
func (siw *ServerInterfaceWrapper) GetPermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPermission(c, projectId, userId)
}

// AddPermission operation middleware
func (siw *ServerInterfaceWrapper) AddPermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddPermission(c, projectId, userId)
}

// UpdatePermission operation middleware
func (siw *ServerInterfaceWrapper) UpdatePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePermission(c, projectId, userId)
}

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(c *gin.Context) {

	var err error

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProjects(c, params)
}

// AddProject operation middleware
func (siw *ServerInterfaceWrapper) AddProject(c *gin.Context) {

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddProject(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/code-system/:code-system_id", wrapper.DeleteCodeSystem)
	router.GET(options.BaseURL+"/code-system/:code-system_id", wrapper.GetCodeSystem)
	router.PUT(options.BaseURL+"/code-system/:code-system_id", wrapper.UpdateCodeSystem)
	router.GET(options.BaseURL+"/code-system/:code-system_id/concepts", wrapper.GetAllConcepts)
	router.GET(options.BaseURL+"/code-system/:code-system_id/find-concept", wrapper.FindConceptByCode)
	router.GET(options.BaseURL+"/code-systems", wrapper.GetAllCodeSystems)
	router.POST(options.BaseURL+"/code-systems", wrapper.AddCodeSystem)
	router.GET(options.BaseURL+"/ping", wrapper.Ping)
	router.DELETE(options.BaseURL+"/project/:project_id", wrapper.DeleteProject)
	router.GET(options.BaseURL+"/project/:project_id", wrapper.GetProject)
	router.PUT(options.BaseURL+"/project/:project_id", wrapper.EditProject)
	router.GET(options.BaseURL+"/project/:project_id/code-system-roles", wrapper.GetAllCodeSystemRoles)
	router.GET(options.BaseURL+"/project/:project_id/code-system-roles/:code-system-role_id", wrapper.GetCodeSystemRole)
	router.PUT(options.BaseURL+"/project/:project_id/code-system-roles/:code-system-role_id", wrapper.UpdateCodeSystemRole)
	router.DELETE(options.BaseURL+"/project/:project_id/mapping/:mapping_id", wrapper.DeleteMapping)
	router.GET(options.BaseURL+"/project/:project_id/mapping/:mapping_id", wrapper.GetMappingByID)
	router.PUT(options.BaseURL+"/project/:project_id/mapping/:mapping_id", wrapper.UpdateMapping)
	router.GET(options.BaseURL+"/project/:project_id/mappings", wrapper.GetAllMappings)
	router.POST(options.BaseURL+"/project/:project_id/mappings", wrapper.AddMapping)
	router.GET(options.BaseURL+"/project/:project_id/permissions", wrapper.GetAllPermissions)
	router.DELETE(options.BaseURL+"/project/:project_id/permissions/:user_id", wrapper.DeletePermission)
	router.GET(options.BaseURL+"/project/:project_id/permissions/:user_id", wrapper.GetPermission)
	router.POST(options.BaseURL+"/project/:project_id/permissions/:user_id", wrapper.AddPermission)
	router.PUT(options.BaseURL+"/project/:project_id/permissions/:user_id", wrapper.UpdatePermission)
	router.GET(options.BaseURL+"/projects", wrapper.GetProjects)
	router.POST(options.BaseURL+"/projects", wrapper.AddProject)
}

type BadRequestErrorJSONResponse string

type InternalServerErrorJSONResponse string

type DeleteCodeSystemRequestObject struct {
	CodeSystemId CodeSystemId `json:"code-system_id"`
}

type DeleteCodeSystemResponseObject interface {
	VisitDeleteCodeSystemResponse(w http.ResponseWriter) error
}

type DeleteCodeSystem200JSONResponse CodeSystem

func (response DeleteCodeSystem200JSONResponse) VisitDeleteCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystem400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteCodeSystem400JSONResponse) VisitDeleteCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystem404JSONResponse ErrorResponse

func (response DeleteCodeSystem404JSONResponse) VisitDeleteCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystem500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteCodeSystem500JSONResponse) VisitDeleteCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRequestObject struct {
	CodeSystemId CodeSystemId `json:"code-system_id"`
}

type GetCodeSystemResponseObject interface {
	VisitGetCodeSystemResponse(w http.ResponseWriter) error
}

type GetCodeSystem200JSONResponse CodeSystem

func (response GetCodeSystem200JSONResponse) VisitGetCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystem400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetCodeSystem400JSONResponse) VisitGetCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystem404JSONResponse ErrorResponse

func (response GetCodeSystem404JSONResponse) VisitGetCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystem500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetCodeSystem500JSONResponse) VisitGetCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRequestObject struct {
	CodeSystemId CodeSystemId `json:"code-system_id"`
	Body         *UpdateCodeSystemJSONRequestBody
}

type UpdateCodeSystemResponseObject interface {
	VisitUpdateCodeSystemResponse(w http.ResponseWriter) error
}

type UpdateCodeSystem200JSONResponse CodeSystem

func (response UpdateCodeSystem200JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystem400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdateCodeSystem400JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystem404JSONResponse ErrorResponse

func (response UpdateCodeSystem404JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystem422JSONResponse ErrorResponse

func (response UpdateCodeSystem422JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystem500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateCodeSystem500JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConceptsRequestObject struct {
	CodeSystemId CodeSystemId `json:"code-system_id"`
	Params       GetAllConceptsParams
}

type GetAllConceptsResponseObject interface {
	VisitGetAllConceptsResponse(w http.ResponseWriter) error
}

type GetAllConcepts200JSONResponse []Concept

func (response GetAllConcepts200JSONResponse) VisitGetAllConceptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConcepts400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllConcepts400JSONResponse) VisitGetAllConceptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConcepts404JSONResponse ErrorResponse

func (response GetAllConcepts404JSONResponse) VisitGetAllConceptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConcepts500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllConcepts500JSONResponse) VisitGetAllConceptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type FindConceptByCodeRequestObject struct {
	CodeSystemId CodeSystemId `json:"code-system_id"`
	Params       FindConceptByCodeParams
}

type FindConceptByCodeResponseObject interface {
	VisitFindConceptByCodeResponse(w http.ResponseWriter) error
}

type FindConceptByCode200JSONResponse []Concept

func (response FindConceptByCode200JSONResponse) VisitFindConceptByCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindConceptByCode400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response FindConceptByCode400JSONResponse) VisitFindConceptByCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindConceptByCode404JSONResponse ErrorResponse

func (response FindConceptByCode404JSONResponse) VisitFindConceptByCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FindConceptByCode500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response FindConceptByCode500JSONResponse) VisitFindConceptByCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemsRequestObject struct {
}

type GetAllCodeSystemsResponseObject interface {
	VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error
}

type GetAllCodeSystems200JSONResponse []CodeSystem

func (response GetAllCodeSystems200JSONResponse) VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystems400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllCodeSystems400JSONResponse) VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystems404JSONResponse ErrorResponse

func (response GetAllCodeSystems404JSONResponse) VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystems500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllCodeSystems500JSONResponse) VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddCodeSystemRequestObject struct {
	Body *AddCodeSystemJSONRequestBody
}

type AddCodeSystemResponseObject interface {
	VisitAddCodeSystemResponse(w http.ResponseWriter) error
}

type AddCodeSystem200JSONResponse CodeSystem

func (response AddCodeSystem200JSONResponse) VisitAddCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddCodeSystem400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response AddCodeSystem400JSONResponse) VisitAddCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddCodeSystem404JSONResponse ErrorResponse

func (response AddCodeSystem404JSONResponse) VisitAddCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddCodeSystem422JSONResponse ErrorResponse

func (response AddCodeSystem422JSONResponse) VisitAddCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AddCodeSystem500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AddCodeSystem500JSONResponse) VisitAddCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PingRequestObject struct {
}

type PingResponseObject interface {
	VisitPingResponse(w http.ResponseWriter) error
}

type Ping200JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response Ping200JSONResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type DeleteProjectResponseObject interface {
	VisitDeleteProjectResponse(w http.ResponseWriter) error
}

type DeleteProject200JSONResponse Project

func (response DeleteProject200JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteProject400JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject404JSONResponse ErrorResponse

func (response DeleteProject404JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProject500JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type GetProjectResponseObject interface {
	VisitGetProjectResponse(w http.ResponseWriter) error
}

type GetProject200JSONResponse ProjectDetails

func (response GetProject200JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProject400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetProject400JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProject404JSONResponse ErrorResponse

func (response GetProject404JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetProject500JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type EditProjectRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *EditProjectJSONRequestBody
}

type EditProjectResponseObject interface {
	VisitEditProjectResponse(w http.ResponseWriter) error
}

type EditProject200JSONResponse Project

func (response EditProject200JSONResponse) VisitEditProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EditProject400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response EditProject400JSONResponse) VisitEditProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EditProject404JSONResponse ErrorResponse

func (response EditProject404JSONResponse) VisitEditProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type EditProject422JSONResponse ErrorResponse

func (response EditProject422JSONResponse) VisitEditProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type EditProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response EditProject500JSONResponse) VisitEditProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRolesRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type GetAllCodeSystemRolesResponseObject interface {
	VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error
}

type GetAllCodeSystemRoles200JSONResponse []CodeSystemRole

func (response GetAllCodeSystemRoles200JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRoles400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllCodeSystemRoles400JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRoles404JSONResponse ErrorResponse

func (response GetAllCodeSystemRoles404JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRoles500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllCodeSystemRoles500JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRoleRequestObject struct {
	ProjectId        ProjectId        `json:"project_id"`
	CodeSystemRoleId CodeSystemRoleId `json:"code-system-role_id"`
}

type GetCodeSystemRoleResponseObject interface {
	VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error
}

type GetCodeSystemRole200JSONResponse CodeSystemRole

func (response GetCodeSystemRole200JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRole400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetCodeSystemRole400JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRole404JSONResponse ErrorResponse

func (response GetCodeSystemRole404JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRole500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetCodeSystemRole500JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRoleRequestObject struct {
	ProjectId        ProjectId        `json:"project_id"`
	CodeSystemRoleId CodeSystemRoleId `json:"code-system-role_id"`
	Body             *UpdateCodeSystemRoleJSONRequestBody
}

type UpdateCodeSystemRoleResponseObject interface {
	VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error
}

type UpdateCodeSystemRole200JSONResponse CodeSystemRole

func (response UpdateCodeSystemRole200JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdateCodeSystemRole400JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole404JSONResponse ErrorResponse

func (response UpdateCodeSystemRole404JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole422JSONResponse ErrorResponse

func (response UpdateCodeSystemRole422JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateCodeSystemRole500JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMappingRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	MappingId MappingId `json:"mapping_id"`
}

type DeleteMappingResponseObject interface {
	VisitDeleteMappingResponse(w http.ResponseWriter) error
}

type DeleteMapping200JSONResponse Mapping

func (response DeleteMapping200JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMapping400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteMapping400JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMapping404JSONResponse ErrorResponse

func (response DeleteMapping404JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMapping500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteMapping500JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMappingByIDRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	MappingId MappingId `json:"mapping_id"`
}

type GetMappingByIDResponseObject interface {
	VisitGetMappingByIDResponse(w http.ResponseWriter) error
}

type GetMappingByID200JSONResponse Mapping

func (response GetMappingByID200JSONResponse) VisitGetMappingByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMappingByID400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetMappingByID400JSONResponse) VisitGetMappingByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMappingByID404JSONResponse ErrorResponse

func (response GetMappingByID404JSONResponse) VisitGetMappingByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMappingByID500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetMappingByID500JSONResponse) VisitGetMappingByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMappingRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	MappingId MappingId `json:"mapping_id"`
	Body      *UpdateMappingJSONRequestBody
}

type UpdateMappingResponseObject interface {
	VisitUpdateMappingResponse(w http.ResponseWriter) error
}

type UpdateMapping200JSONResponse Mapping

func (response UpdateMapping200JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdateMapping400JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping404JSONResponse ErrorResponse

func (response UpdateMapping404JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping422JSONResponse ErrorResponse

func (response UpdateMapping422JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateMapping500JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappingsRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Params    GetAllMappingsParams
}

type GetAllMappingsResponseObject interface {
	VisitGetAllMappingsResponse(w http.ResponseWriter) error
}

type GetAllMappings200JSONResponse []Mapping

func (response GetAllMappings200JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappings400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllMappings400JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappings404JSONResponse ErrorResponse

func (response GetAllMappings404JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappings500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllMappings500JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddMappingRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *AddMappingJSONRequestBody
}

type AddMappingResponseObject interface {
	VisitAddMappingResponse(w http.ResponseWriter) error
}

type AddMapping200JSONResponse Mapping

func (response AddMapping200JSONResponse) VisitAddMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddMapping400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response AddMapping400JSONResponse) VisitAddMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddMapping404JSONResponse ErrorResponse

func (response AddMapping404JSONResponse) VisitAddMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddMapping422JSONResponse ErrorResponse

func (response AddMapping422JSONResponse) VisitAddMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AddMapping500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AddMapping500JSONResponse) VisitAddMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissionsRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type GetAllPermissionsResponseObject interface {
	VisitGetAllPermissionsResponse(w http.ResponseWriter) error
}

type GetAllPermissions200JSONResponse []ProjectPermission

func (response GetAllPermissions200JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissions400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllPermissions400JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissions404JSONResponse ErrorResponse

func (response GetAllPermissions404JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissions500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllPermissions500JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermissionRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	UserId    UserId    `json:"user_id"`
}

type DeletePermissionResponseObject interface {
	VisitDeletePermissionResponse(w http.ResponseWriter) error
}

type DeletePermission200JSONResponse ProjectPermission

func (response DeletePermission200JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeletePermission400JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission404JSONResponse ErrorResponse

func (response DeletePermission404JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeletePermission500JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPermissionRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	UserId    UserId    `json:"user_id"`
}

type GetPermissionResponseObject interface {
	VisitGetPermissionResponse(w http.ResponseWriter) error
}

type GetPermission200JSONResponse ProjectPermission

func (response GetPermission200JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPermission400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetPermission400JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPermission404JSONResponse ErrorResponse

func (response GetPermission404JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPermission500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPermission500JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddPermissionRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	UserId    UserId    `json:"user_id"`
	Body      *AddPermissionJSONRequestBody
}

type AddPermissionResponseObject interface {
	VisitAddPermissionResponse(w http.ResponseWriter) error
}

type AddPermission200JSONResponse ProjectPermission

func (response AddPermission200JSONResponse) VisitAddPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddPermission400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response AddPermission400JSONResponse) VisitAddPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddPermission404JSONResponse ErrorResponse

func (response AddPermission404JSONResponse) VisitAddPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddPermission422JSONResponse ErrorResponse

func (response AddPermission422JSONResponse) VisitAddPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AddPermission500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AddPermission500JSONResponse) VisitAddPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermissionRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	UserId    UserId    `json:"user_id"`
	Body      *UpdatePermissionJSONRequestBody
}

type UpdatePermissionResponseObject interface {
	VisitUpdatePermissionResponse(w http.ResponseWriter) error
}

type UpdatePermission200JSONResponse ProjectPermission

func (response UpdatePermission200JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdatePermission400JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission404JSONResponse ErrorResponse

func (response UpdatePermission404JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission422JSONResponse ErrorResponse

func (response UpdatePermission422JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdatePermission500JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectsRequestObject struct {
	Params GetProjectsParams
}

type GetProjectsResponseObject interface {
	VisitGetProjectsResponse(w http.ResponseWriter) error
}

type GetProjects200JSONResponse []Project

func (response GetProjects200JSONResponse) VisitGetProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjects400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetProjects400JSONResponse) VisitGetProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProjects404JSONResponse ErrorResponse

func (response GetProjects404JSONResponse) VisitGetProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProjects500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetProjects500JSONResponse) VisitGetProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddProjectRequestObject struct {
	Body *AddProjectJSONRequestBody
}

type AddProjectResponseObject interface {
	VisitAddProjectResponse(w http.ResponseWriter) error
}

type AddProject200JSONResponse ProjectDetails

func (response AddProject200JSONResponse) VisitAddProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddProject400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response AddProject400JSONResponse) VisitAddProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddProject422JSONResponse ErrorResponse

func (response AddProject422JSONResponse) VisitAddProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AddProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response AddProject500JSONResponse) VisitAddProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete a code system by ID
	// (DELETE /code-system/{code-system_id})
	DeleteCodeSystem(ctx context.Context, request DeleteCodeSystemRequestObject) (DeleteCodeSystemResponseObject, error)
	// Get a code system by ID
	// (GET /code-system/{code-system_id})
	GetCodeSystem(ctx context.Context, request GetCodeSystemRequestObject) (GetCodeSystemResponseObject, error)
	// Update a code system by ID
	// (PUT /code-system/{code-system_id})
	UpdateCodeSystem(ctx context.Context, request UpdateCodeSystemRequestObject) (UpdateCodeSystemResponseObject, error)
	// Get all concepts for a code system by ID
	// (GET /code-system/{code-system_id}/concepts)
	GetAllConcepts(ctx context.Context, request GetAllConceptsRequestObject) (GetAllConceptsResponseObject, error)
	// Find a concept by code or meaning
	// (GET /code-system/{code-system_id}/find-concept)
	FindConceptByCode(ctx context.Context, request FindConceptByCodeRequestObject) (FindConceptByCodeResponseObject, error)
	// Get all code systems
	// (GET /code-systems)
	GetAllCodeSystems(ctx context.Context, request GetAllCodeSystemsRequestObject) (GetAllCodeSystemsResponseObject, error)
	// Create a new code system
	// (POST /code-systems)
	AddCodeSystem(ctx context.Context, request AddCodeSystemRequestObject) (AddCodeSystemResponseObject, error)
	// Check if the server is running
	// (GET /ping)
	Ping(ctx context.Context, request PingRequestObject) (PingResponseObject, error)
	// Delete a project
	// (DELETE /project/{project_id})
	DeleteProject(ctx context.Context, request DeleteProjectRequestObject) (DeleteProjectResponseObject, error)
	// Get project details
	// (GET /project/{project_id})
	GetProject(ctx context.Context, request GetProjectRequestObject) (GetProjectResponseObject, error)
	// Update the project information
	// (PUT /project/{project_id})
	EditProject(ctx context.Context, request EditProjectRequestObject) (EditProjectResponseObject, error)
	// Get all code system roles for a project
	// (GET /project/{project_id}/code-system-roles)
	GetAllCodeSystemRoles(ctx context.Context, request GetAllCodeSystemRolesRequestObject) (GetAllCodeSystemRolesResponseObject, error)
	// Get a code system role by ID
	// (GET /project/{project_id}/code-system-roles/{code-system-role_id})
	GetCodeSystemRole(ctx context.Context, request GetCodeSystemRoleRequestObject) (GetCodeSystemRoleResponseObject, error)
	// Update a code system role by ID
	// (PUT /project/{project_id}/code-system-roles/{code-system-role_id})
	UpdateCodeSystemRole(ctx context.Context, request UpdateCodeSystemRoleRequestObject) (UpdateCodeSystemRoleResponseObject, error)
	// Delete a mapping and its elements by ID
	// (DELETE /project/{project_id}/mapping/{mapping_id})
	DeleteMapping(ctx context.Context, request DeleteMappingRequestObject) (DeleteMappingResponseObject, error)
	// Get a mapping with its elements by ID
	// (GET /project/{project_id}/mapping/{mapping_id})
	GetMappingByID(ctx context.Context, request GetMappingByIDRequestObject) (GetMappingByIDResponseObject, error)
	// Update a mapping and its elements by ID
	// (PUT /project/{project_id}/mapping/{mapping_id})
	UpdateMapping(ctx context.Context, request UpdateMappingRequestObject) (UpdateMappingResponseObject, error)
	// Get all mappings for a project by project ID
	// (GET /project/{project_id}/mappings)
	GetAllMappings(ctx context.Context, request GetAllMappingsRequestObject) (GetAllMappingsResponseObject, error)
	// Create a new mapping for a project
	// (POST /project/{project_id}/mappings)
	AddMapping(ctx context.Context, request AddMappingRequestObject) (AddMappingResponseObject, error)
	// Get permissions for a project
	// (GET /project/{project_id}/permissions)
	GetAllPermissions(ctx context.Context, request GetAllPermissionsRequestObject) (GetAllPermissionsResponseObject, error)
	// Delete a project permission for a user
	// (DELETE /project/{project_id}/permissions/{user_id})
	DeletePermission(ctx context.Context, request DeletePermissionRequestObject) (DeletePermissionResponseObject, error)
	// Get project permission for a specific user
	// (GET /project/{project_id}/permissions/{user_id})
	GetPermission(ctx context.Context, request GetPermissionRequestObject) (GetPermissionResponseObject, error)
	// Create a new project permission for user
	// (POST /project/{project_id}/permissions/{user_id})
	AddPermission(ctx context.Context, request AddPermissionRequestObject) (AddPermissionResponseObject, error)
	// Update a project permission for a user
	// (PUT /project/{project_id}/permissions/{user_id})
	UpdatePermission(ctx context.Context, request UpdatePermissionRequestObject) (UpdatePermissionResponseObject, error)
	// Get all projects
	// (GET /projects)
	GetProjects(ctx context.Context, request GetProjectsRequestObject) (GetProjectsResponseObject, error)
	// Create a new project
	// (POST /projects)
	AddProject(ctx context.Context, request AddProjectRequestObject) (AddProjectResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DeleteCodeSystem operation middleware
func (sh *strictHandler) DeleteCodeSystem(ctx *gin.Context, codeSystemId CodeSystemId) {
	var request DeleteCodeSystemRequestObject

	request.CodeSystemId = codeSystemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCodeSystem(ctx, request.(DeleteCodeSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCodeSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCodeSystemResponseObject); ok {
		if err := validResponse.VisitDeleteCodeSystemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCodeSystem operation middleware
func (sh *strictHandler) GetCodeSystem(ctx *gin.Context, codeSystemId CodeSystemId) {
	var request GetCodeSystemRequestObject

	request.CodeSystemId = codeSystemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCodeSystem(ctx, request.(GetCodeSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCodeSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCodeSystemResponseObject); ok {
		if err := validResponse.VisitGetCodeSystemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCodeSystem operation middleware
func (sh *strictHandler) UpdateCodeSystem(ctx *gin.Context, codeSystemId CodeSystemId) {
	var request UpdateCodeSystemRequestObject

	request.CodeSystemId = codeSystemId

	var body UpdateCodeSystemJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCodeSystem(ctx, request.(UpdateCodeSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCodeSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateCodeSystemResponseObject); ok {
		if err := validResponse.VisitUpdateCodeSystemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllConcepts operation middleware
func (sh *strictHandler) GetAllConcepts(ctx *gin.Context, codeSystemId CodeSystemId, params GetAllConceptsParams) {
	var request GetAllConceptsRequestObject

	request.CodeSystemId = codeSystemId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllConcepts(ctx, request.(GetAllConceptsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllConcepts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllConceptsResponseObject); ok {
		if err := validResponse.VisitGetAllConceptsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindConceptByCode operation middleware
func (sh *strictHandler) FindConceptByCode(ctx *gin.Context, codeSystemId CodeSystemId, params FindConceptByCodeParams) {
	var request FindConceptByCodeRequestObject

	request.CodeSystemId = codeSystemId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindConceptByCode(ctx, request.(FindConceptByCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindConceptByCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(FindConceptByCodeResponseObject); ok {
		if err := validResponse.VisitFindConceptByCodeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllCodeSystems operation middleware
func (sh *strictHandler) GetAllCodeSystems(ctx *gin.Context) {
	var request GetAllCodeSystemsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllCodeSystems(ctx, request.(GetAllCodeSystemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllCodeSystems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllCodeSystemsResponseObject); ok {
		if err := validResponse.VisitGetAllCodeSystemsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddCodeSystem operation middleware
func (sh *strictHandler) AddCodeSystem(ctx *gin.Context) {
	var request AddCodeSystemRequestObject

	var body AddCodeSystemJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddCodeSystem(ctx, request.(AddCodeSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddCodeSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddCodeSystemResponseObject); ok {
		if err := validResponse.VisitAddCodeSystemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Ping operation middleware
func (sh *strictHandler) Ping(ctx *gin.Context) {
	var request PingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ping(ctx, request.(PingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PingResponseObject); ok {
		if err := validResponse.VisitPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProject operation middleware
func (sh *strictHandler) DeleteProject(ctx *gin.Context, projectId ProjectId) {
	var request DeleteProjectRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProject(ctx, request.(DeleteProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteProjectResponseObject); ok {
		if err := validResponse.VisitDeleteProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProject operation middleware
func (sh *strictHandler) GetProject(ctx *gin.Context, projectId ProjectId) {
	var request GetProjectRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProject(ctx, request.(GetProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectResponseObject); ok {
		if err := validResponse.VisitGetProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EditProject operation middleware
func (sh *strictHandler) EditProject(ctx *gin.Context, projectId ProjectId) {
	var request EditProjectRequestObject

	request.ProjectId = projectId

	var body EditProjectJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EditProject(ctx, request.(EditProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EditProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EditProjectResponseObject); ok {
		if err := validResponse.VisitEditProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllCodeSystemRoles operation middleware
func (sh *strictHandler) GetAllCodeSystemRoles(ctx *gin.Context, projectId ProjectId) {
	var request GetAllCodeSystemRolesRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllCodeSystemRoles(ctx, request.(GetAllCodeSystemRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllCodeSystemRoles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllCodeSystemRolesResponseObject); ok {
		if err := validResponse.VisitGetAllCodeSystemRolesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCodeSystemRole operation middleware
func (sh *strictHandler) GetCodeSystemRole(ctx *gin.Context, projectId ProjectId, codeSystemRoleId CodeSystemRoleId) {
	var request GetCodeSystemRoleRequestObject

	request.ProjectId = projectId
	request.CodeSystemRoleId = codeSystemRoleId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCodeSystemRole(ctx, request.(GetCodeSystemRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCodeSystemRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCodeSystemRoleResponseObject); ok {
		if err := validResponse.VisitGetCodeSystemRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCodeSystemRole operation middleware
func (sh *strictHandler) UpdateCodeSystemRole(ctx *gin.Context, projectId ProjectId, codeSystemRoleId CodeSystemRoleId) {
	var request UpdateCodeSystemRoleRequestObject

	request.ProjectId = projectId
	request.CodeSystemRoleId = codeSystemRoleId

	var body UpdateCodeSystemRoleJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCodeSystemRole(ctx, request.(UpdateCodeSystemRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCodeSystemRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateCodeSystemRoleResponseObject); ok {
		if err := validResponse.VisitUpdateCodeSystemRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMapping operation middleware
func (sh *strictHandler) DeleteMapping(ctx *gin.Context, projectId ProjectId, mappingId MappingId) {
	var request DeleteMappingRequestObject

	request.ProjectId = projectId
	request.MappingId = mappingId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMapping(ctx, request.(DeleteMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMapping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteMappingResponseObject); ok {
		if err := validResponse.VisitDeleteMappingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMappingByID operation middleware
func (sh *strictHandler) GetMappingByID(ctx *gin.Context, projectId ProjectId, mappingId MappingId) {
	var request GetMappingByIDRequestObject

	request.ProjectId = projectId
	request.MappingId = mappingId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMappingByID(ctx, request.(GetMappingByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMappingByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMappingByIDResponseObject); ok {
		if err := validResponse.VisitGetMappingByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateMapping operation middleware
func (sh *strictHandler) UpdateMapping(ctx *gin.Context, projectId ProjectId, mappingId MappingId) {
	var request UpdateMappingRequestObject

	request.ProjectId = projectId
	request.MappingId = mappingId

	var body UpdateMappingJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMapping(ctx, request.(UpdateMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMapping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateMappingResponseObject); ok {
		if err := validResponse.VisitUpdateMappingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllMappings operation middleware
func (sh *strictHandler) GetAllMappings(ctx *gin.Context, projectId ProjectId, params GetAllMappingsParams) {
	var request GetAllMappingsRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllMappings(ctx, request.(GetAllMappingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllMappings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllMappingsResponseObject); ok {
		if err := validResponse.VisitGetAllMappingsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddMapping operation middleware
func (sh *strictHandler) AddMapping(ctx *gin.Context, projectId ProjectId) {
	var request AddMappingRequestObject

	request.ProjectId = projectId

	var body AddMappingJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddMapping(ctx, request.(AddMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddMapping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddMappingResponseObject); ok {
		if err := validResponse.VisitAddMappingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllPermissions operation middleware
func (sh *strictHandler) GetAllPermissions(ctx *gin.Context, projectId ProjectId) {
	var request GetAllPermissionsRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllPermissions(ctx, request.(GetAllPermissionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllPermissions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllPermissionsResponseObject); ok {
		if err := validResponse.VisitGetAllPermissionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePermission operation middleware
func (sh *strictHandler) DeletePermission(ctx *gin.Context, projectId ProjectId, userId UserId) {
	var request DeletePermissionRequestObject

	request.ProjectId = projectId
	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePermission(ctx, request.(DeletePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeletePermissionResponseObject); ok {
		if err := validResponse.VisitDeletePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPermission operation middleware
func (sh *strictHandler) GetPermission(ctx *gin.Context, projectId ProjectId, userId UserId) {
	var request GetPermissionRequestObject

	request.ProjectId = projectId
	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPermission(ctx, request.(GetPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPermissionResponseObject); ok {
		if err := validResponse.VisitGetPermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddPermission operation middleware
func (sh *strictHandler) AddPermission(ctx *gin.Context, projectId ProjectId, userId UserId) {
	var request AddPermissionRequestObject

	request.ProjectId = projectId
	request.UserId = userId

	var body AddPermissionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddPermission(ctx, request.(AddPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddPermissionResponseObject); ok {
		if err := validResponse.VisitAddPermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePermission operation middleware
func (sh *strictHandler) UpdatePermission(ctx *gin.Context, projectId ProjectId, userId UserId) {
	var request UpdatePermissionRequestObject

	request.ProjectId = projectId
	request.UserId = userId

	var body UpdatePermissionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePermission(ctx, request.(UpdatePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdatePermissionResponseObject); ok {
		if err := validResponse.VisitUpdatePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjects operation middleware
func (sh *strictHandler) GetProjects(ctx *gin.Context, params GetProjectsParams) {
	var request GetProjectsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjects(ctx, request.(GetProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjects")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectsResponseObject); ok {
		if err := validResponse.VisitGetProjectsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddProject operation middleware
func (sh *strictHandler) AddProject(ctx *gin.Context) {
	var request AddProjectRequestObject

	var body AddProjectJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddProject(ctx, request.(AddProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddProjectResponseObject); ok {
		if err := validResponse.VisitAddProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"uA/OXG//HwAA///EPgSlSWkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
