// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all code systems
	// (GET /codesystems)
	GetAllCodeSystems(c *gin.Context)
	// Create a new code system
	// (POST /codesystems)
	CreateCodeSystem(c *gin.Context)
	// Update a code system by ID
	// (PUT /codesystems)
	UpdateCodeSystem(c *gin.Context)
	// Delete a code system by ID
	// (DELETE /codesystems/{codesystem_id})
	DeleteCodeSystem(c *gin.Context, codesystemId CodesystemId)
	// Get a code system by ID
	// (GET /codesystems/{codesystem_id})
	GetCodeSystem(c *gin.Context, codesystemId CodesystemId)
	// Get all concepts for a code system by ID
	// (GET /codesystems/{codesystem_id}/concepts)
	GetAllConcepts(c *gin.Context, codesystemId CodesystemId, params GetAllConceptsParams)
	// Create a new version for a code system by ID
	// (POST /codesystems/{codesystem_id}/versions)
	CreateCodeSystemVersion(c *gin.Context, codesystemId CodesystemId)
	// Update a code system version by ID
	// (PUT /codesystems/{codesystem_id}/versions)
	UpdateCodeSystemVersion(c *gin.Context, codesystemId CodesystemId)
	// Delete a code system version by ID
	// (DELETE /codesystems/{codesystem_id}/versions/{codesystem-version_id})
	DeleteCodeSystemVersion(c *gin.Context, codesystemId CodesystemId, codesystemVersionId CodesystemVersionId)
	// Get all concepts for a code system version by ID
	// (GET /codesystems/{codesystem_id}/versions/{codesystem-version_id}/concepts)
	GetAllConceptsByVersion(c *gin.Context, codesystemId CodesystemId, codesystemVersionId CodesystemVersionId, params GetAllConceptsByVersionParams)
	// Import concepts for a code system version by ID
	// (POST /codesystems/{codesystem_id}/versions/{codesystem-version_id}/import)
	ImportCodeSystemVersion(c *gin.Context, codesystemId CodesystemId, codesystemVersionId CodesystemVersionId)
	// Check if the server is running
	// (GET /ping)
	Ping(c *gin.Context)
	// Get all projects
	// (GET /projects)
	GetAllProjects(c *gin.Context, params GetAllProjectsParams)
	// Create a new project
	// (POST /projects)
	CreateProject(c *gin.Context)
	// Update the project information
	// (PUT /projects)
	UpdateProject(c *gin.Context)
	// Delete a project
	// (DELETE /projects/{project_id})
	DeleteProject(c *gin.Context, projectId ProjectId)
	// Get project details
	// (GET /projects/{project_id})
	GetProject(c *gin.Context, projectId ProjectId)
	// Get all code system roles for a project
	// (GET /projects/{project_id}/codesystem-roles)
	GetAllCodeSystemRoles(c *gin.Context, projectId ProjectId)
	// Update a code system role by ID
	// (PUT /projects/{project_id}/codesystem-roles)
	UpdateCodeSystemRole(c *gin.Context, projectId ProjectId)
	// Get a code system role by ID
	// (GET /projects/{project_id}/codesystem-roles/{codesystem-role_id})
	GetCodeSystemRole(c *gin.Context, projectId ProjectId, codesystemRoleId CodesystemRoleId)
	// Get all mappings for a project by project ID
	// (GET /projects/{project_id}/mappings)
	GetAllMappings(c *gin.Context, projectId ProjectId, params GetAllMappingsParams)
	// Update a mapping and its elements by their concept IDs
	// (PATCH /projects/{project_id}/mappings)
	PatchMapping(c *gin.Context, projectId ProjectId)
	// Create a new mapping for a project
	// (POST /projects/{project_id}/mappings)
	CreateMapping(c *gin.Context, projectId ProjectId)
	// Update a mapping and its elements by their concept IDs
	// (PUT /projects/{project_id}/mappings)
	UpdateMapping(c *gin.Context, projectId ProjectId)
	// Delete a mapping and its elements by ID
	// (DELETE /projects/{project_id}/mappings/{mapping_id})
	DeleteMapping(c *gin.Context, projectId ProjectId, mappingId MappingId)
	// Get a mapping with its elements by ID
	// (GET /projects/{project_id}/mappings/{mapping_id})
	GetMapping(c *gin.Context, projectId ProjectId, mappingId MappingId)
	// Get permissions for a project
	// (GET /projects/{project_id}/permissions)
	GetAllPermissions(c *gin.Context, projectId ProjectId)
	// Create a new project permission for user
	// (POST /projects/{project_id}/permissions)
	CreatePermission(c *gin.Context, projectId ProjectId)
	// Update a project permission for a user
	// (PUT /projects/{project_id}/permissions)
	UpdatePermission(c *gin.Context, projectId ProjectId)
	// Delete a project permission for a user
	// (DELETE /projects/{project_id}/permissions/{user_id})
	DeletePermission(c *gin.Context, projectId ProjectId, userId UserId)
	// Get project permission for a specific user
	// (GET /projects/{project_id}/permissions/{user_id})
	GetPermission(c *gin.Context, projectId ProjectId, userId UserId)
	// Get all users
	// (GET /users)
	GetAllUsers(c *gin.Context)
	// Updates user-database with information from Access-Token
	// (POST /users/login)
	Login(c *gin.Context)
	// Delete a user
	// (DELETE /users/{user_id})
	DeleteUser(c *gin.Context, userId UserId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAllCodeSystems operation middleware
func (siw *ServerInterfaceWrapper) GetAllCodeSystems(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllCodeSystems(c)
}

// CreateCodeSystem operation middleware
func (siw *ServerInterfaceWrapper) CreateCodeSystem(c *gin.Context) {

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCodeSystem(c)
}

// UpdateCodeSystem operation middleware
func (siw *ServerInterfaceWrapper) UpdateCodeSystem(c *gin.Context) {

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCodeSystem(c)
}

// DeleteCodeSystem operation middleware
func (siw *ServerInterfaceWrapper) DeleteCodeSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "codesystem_id" -------------
	var codesystemId CodesystemId

	err = runtime.BindStyledParameterWithOptions("simple", "codesystem_id", c.Param("codesystem_id"), &codesystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codesystem_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCodeSystem(c, codesystemId)
}

// GetCodeSystem operation middleware
func (siw *ServerInterfaceWrapper) GetCodeSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "codesystem_id" -------------
	var codesystemId CodesystemId

	err = runtime.BindStyledParameterWithOptions("simple", "codesystem_id", c.Param("codesystem_id"), &codesystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codesystem_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCodeSystem(c, codesystemId)
}

// GetAllConcepts operation middleware
func (siw *ServerInterfaceWrapper) GetAllConcepts(c *gin.Context) {

	var err error

	// ------------- Path parameter "codesystem_id" -------------
	var codesystemId CodesystemId

	err = runtime.BindStyledParameterWithOptions("simple", "codesystem_id", c.Param("codesystem_id"), &codesystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codesystem_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllConceptsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "codeSearch" -------------

	err = runtime.BindQueryParameter("form", true, false, "codeSearch", c.Request.URL.Query(), &params.CodeSearch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codeSearch: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "meaningSearch" -------------

	err = runtime.BindQueryParameter("form", true, false, "meaningSearch", c.Request.URL.Query(), &params.MeaningSearch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter meaningSearch: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllConcepts(c, codesystemId, params)
}

// CreateCodeSystemVersion operation middleware
func (siw *ServerInterfaceWrapper) CreateCodeSystemVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "codesystem_id" -------------
	var codesystemId CodesystemId

	err = runtime.BindStyledParameterWithOptions("simple", "codesystem_id", c.Param("codesystem_id"), &codesystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codesystem_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCodeSystemVersion(c, codesystemId)
}

// UpdateCodeSystemVersion operation middleware
func (siw *ServerInterfaceWrapper) UpdateCodeSystemVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "codesystem_id" -------------
	var codesystemId CodesystemId

	err = runtime.BindStyledParameterWithOptions("simple", "codesystem_id", c.Param("codesystem_id"), &codesystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codesystem_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCodeSystemVersion(c, codesystemId)
}

// DeleteCodeSystemVersion operation middleware
func (siw *ServerInterfaceWrapper) DeleteCodeSystemVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "codesystem_id" -------------
	var codesystemId CodesystemId

	err = runtime.BindStyledParameterWithOptions("simple", "codesystem_id", c.Param("codesystem_id"), &codesystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codesystem_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "codesystem-version_id" -------------
	var codesystemVersionId CodesystemVersionId

	err = runtime.BindStyledParameterWithOptions("simple", "codesystem-version_id", c.Param("codesystem-version_id"), &codesystemVersionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codesystem-version_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCodeSystemVersion(c, codesystemId, codesystemVersionId)
}

// GetAllConceptsByVersion operation middleware
func (siw *ServerInterfaceWrapper) GetAllConceptsByVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "codesystem_id" -------------
	var codesystemId CodesystemId

	err = runtime.BindStyledParameterWithOptions("simple", "codesystem_id", c.Param("codesystem_id"), &codesystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codesystem_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "codesystem-version_id" -------------
	var codesystemVersionId CodesystemVersionId

	err = runtime.BindStyledParameterWithOptions("simple", "codesystem-version_id", c.Param("codesystem-version_id"), &codesystemVersionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codesystem-version_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllConceptsByVersionParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "codeSearch" -------------

	err = runtime.BindQueryParameter("form", true, false, "codeSearch", c.Request.URL.Query(), &params.CodeSearch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codeSearch: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "meaningSearch" -------------

	err = runtime.BindQueryParameter("form", true, false, "meaningSearch", c.Request.URL.Query(), &params.MeaningSearch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter meaningSearch: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllConceptsByVersion(c, codesystemId, codesystemVersionId, params)
}

// ImportCodeSystemVersion operation middleware
func (siw *ServerInterfaceWrapper) ImportCodeSystemVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "codesystem_id" -------------
	var codesystemId CodesystemId

	err = runtime.BindStyledParameterWithOptions("simple", "codesystem_id", c.Param("codesystem_id"), &codesystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codesystem_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "codesystem-version_id" -------------
	var codesystemVersionId CodesystemVersionId

	err = runtime.BindStyledParameterWithOptions("simple", "codesystem-version_id", c.Param("codesystem-version_id"), &codesystemVersionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codesystem-version_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ImportCodeSystemVersion(c, codesystemId, codesystemVersionId)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Ping(c)
}

// GetAllProjects operation middleware
func (siw *ServerInterfaceWrapper) GetAllProjects(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllProjectsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllProjects(c, params)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(c *gin.Context) {

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProject(c)
}

// UpdateProject operation middleware
func (siw *ServerInterfaceWrapper) UpdateProject(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProject(c)
}

// DeleteProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProject(c, projectId)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProject(c, projectId)
}

// GetAllCodeSystemRoles operation middleware
func (siw *ServerInterfaceWrapper) GetAllCodeSystemRoles(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllCodeSystemRoles(c, projectId)
}

// UpdateCodeSystemRole operation middleware
func (siw *ServerInterfaceWrapper) UpdateCodeSystemRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCodeSystemRole(c, projectId)
}

// GetCodeSystemRole operation middleware
func (siw *ServerInterfaceWrapper) GetCodeSystemRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "codesystem-role_id" -------------
	var codesystemRoleId CodesystemRoleId

	err = runtime.BindStyledParameterWithOptions("simple", "codesystem-role_id", c.Param("codesystem-role_id"), &codesystemRoleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codesystem-role_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCodeSystemRole(c, projectId, codesystemRoleId)
}

// GetAllMappings operation middleware
func (siw *ServerInterfaceWrapper) GetAllMappings(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllMappingsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllMappings(c, projectId, params)
}

// PatchMapping operation middleware
func (siw *ServerInterfaceWrapper) PatchMapping(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchMapping(c, projectId)
}

// CreateMapping operation middleware
func (siw *ServerInterfaceWrapper) CreateMapping(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateMapping(c, projectId)
}

// UpdateMapping operation middleware
func (siw *ServerInterfaceWrapper) UpdateMapping(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateMapping(c, projectId)
}

// DeleteMapping operation middleware
func (siw *ServerInterfaceWrapper) DeleteMapping(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "mapping_id" -------------
	var mappingId MappingId

	err = runtime.BindStyledParameterWithOptions("simple", "mapping_id", c.Param("mapping_id"), &mappingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mapping_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMapping(c, projectId, mappingId)
}

// GetMapping operation middleware
func (siw *ServerInterfaceWrapper) GetMapping(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "mapping_id" -------------
	var mappingId MappingId

	err = runtime.BindStyledParameterWithOptions("simple", "mapping_id", c.Param("mapping_id"), &mappingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mapping_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMapping(c, projectId, mappingId)
}

// GetAllPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetAllPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllPermissions(c, projectId)
}

// CreatePermission operation middleware
func (siw *ServerInterfaceWrapper) CreatePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePermission(c, projectId)
}

// UpdatePermission operation middleware
func (siw *ServerInterfaceWrapper) UpdatePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePermission(c, projectId)
}

// DeletePermission operation middleware
func (siw *ServerInterfaceWrapper) DeletePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePermission(c, projectId, userId)
}

// GetPermission operation middleware
func (siw *ServerInterfaceWrapper) GetPermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPermission(c, projectId, userId)
}

// GetAllUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAllUsers(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllUsers(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/codesystems", wrapper.GetAllCodeSystems)
	router.POST(options.BaseURL+"/codesystems", wrapper.CreateCodeSystem)
	router.PUT(options.BaseURL+"/codesystems", wrapper.UpdateCodeSystem)
	router.DELETE(options.BaseURL+"/codesystems/:codesystem_id", wrapper.DeleteCodeSystem)
	router.GET(options.BaseURL+"/codesystems/:codesystem_id", wrapper.GetCodeSystem)
	router.GET(options.BaseURL+"/codesystems/:codesystem_id/concepts", wrapper.GetAllConcepts)
	router.POST(options.BaseURL+"/codesystems/:codesystem_id/versions", wrapper.CreateCodeSystemVersion)
	router.PUT(options.BaseURL+"/codesystems/:codesystem_id/versions", wrapper.UpdateCodeSystemVersion)
	router.DELETE(options.BaseURL+"/codesystems/:codesystem_id/versions/:codesystem-version_id", wrapper.DeleteCodeSystemVersion)
	router.GET(options.BaseURL+"/codesystems/:codesystem_id/versions/:codesystem-version_id/concepts", wrapper.GetAllConceptsByVersion)
	router.POST(options.BaseURL+"/codesystems/:codesystem_id/versions/:codesystem-version_id/import", wrapper.ImportCodeSystemVersion)
	router.GET(options.BaseURL+"/ping", wrapper.Ping)
	router.GET(options.BaseURL+"/projects", wrapper.GetAllProjects)
	router.POST(options.BaseURL+"/projects", wrapper.CreateProject)
	router.PUT(options.BaseURL+"/projects", wrapper.UpdateProject)
	router.DELETE(options.BaseURL+"/projects/:project_id", wrapper.DeleteProject)
	router.GET(options.BaseURL+"/projects/:project_id", wrapper.GetProject)
	router.GET(options.BaseURL+"/projects/:project_id/codesystem-roles", wrapper.GetAllCodeSystemRoles)
	router.PUT(options.BaseURL+"/projects/:project_id/codesystem-roles", wrapper.UpdateCodeSystemRole)
	router.GET(options.BaseURL+"/projects/:project_id/codesystem-roles/:codesystem-role_id", wrapper.GetCodeSystemRole)
	router.GET(options.BaseURL+"/projects/:project_id/mappings", wrapper.GetAllMappings)
	router.PATCH(options.BaseURL+"/projects/:project_id/mappings", wrapper.PatchMapping)
	router.POST(options.BaseURL+"/projects/:project_id/mappings", wrapper.CreateMapping)
	router.PUT(options.BaseURL+"/projects/:project_id/mappings", wrapper.UpdateMapping)
	router.DELETE(options.BaseURL+"/projects/:project_id/mappings/:mapping_id", wrapper.DeleteMapping)
	router.GET(options.BaseURL+"/projects/:project_id/mappings/:mapping_id", wrapper.GetMapping)
	router.GET(options.BaseURL+"/projects/:project_id/permissions", wrapper.GetAllPermissions)
	router.POST(options.BaseURL+"/projects/:project_id/permissions", wrapper.CreatePermission)
	router.PUT(options.BaseURL+"/projects/:project_id/permissions", wrapper.UpdatePermission)
	router.DELETE(options.BaseURL+"/projects/:project_id/permissions/:user_id", wrapper.DeletePermission)
	router.GET(options.BaseURL+"/projects/:project_id/permissions/:user_id", wrapper.GetPermission)
	router.GET(options.BaseURL+"/users", wrapper.GetAllUsers)
	router.POST(options.BaseURL+"/users/login", wrapper.Login)
	router.DELETE(options.BaseURL+"/users/:user_id", wrapper.DeleteUser)
}

type BadRequestErrorJSONResponse string

type ForbiddenErrorJSONResponse string

type InternalServerErrorJSONResponse string

type UnauthorizedErrorJSONResponse string

type GetAllCodeSystemsRequestObject struct {
}

type GetAllCodeSystemsResponseObject interface {
	VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error
}

type GetAllCodeSystems200JSONResponse []GetCodeSystem

func (response GetAllCodeSystems200JSONResponse) VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystems400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllCodeSystems400JSONResponse) VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystems401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetAllCodeSystems401JSONResponse) VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystems500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllCodeSystems500JSONResponse) VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystemRequestObject struct {
	Body *CreateCodeSystemJSONRequestBody
}

type CreateCodeSystemResponseObject interface {
	VisitCreateCodeSystemResponse(w http.ResponseWriter) error
}

type CreateCodeSystem200JSONResponse CodeSystem

func (response CreateCodeSystem200JSONResponse) VisitCreateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystem400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response CreateCodeSystem400JSONResponse) VisitCreateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystem401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response CreateCodeSystem401JSONResponse) VisitCreateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystem404JSONResponse ErrorResponse

func (response CreateCodeSystem404JSONResponse) VisitCreateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystem422JSONResponse ErrorResponse

func (response CreateCodeSystem422JSONResponse) VisitCreateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystem500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateCodeSystem500JSONResponse) VisitCreateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRequestObject struct {
	Body *UpdateCodeSystemJSONRequestBody
}

type UpdateCodeSystemResponseObject interface {
	VisitUpdateCodeSystemResponse(w http.ResponseWriter) error
}

type UpdateCodeSystem200JSONResponse CodeSystem

func (response UpdateCodeSystem200JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystem400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdateCodeSystem400JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystem401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response UpdateCodeSystem401JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystem404JSONResponse ErrorResponse

func (response UpdateCodeSystem404JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystem422JSONResponse ErrorResponse

func (response UpdateCodeSystem422JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystem500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateCodeSystem500JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystemRequestObject struct {
	CodesystemId CodesystemId `json:"codesystem_id"`
}

type DeleteCodeSystemResponseObject interface {
	VisitDeleteCodeSystemResponse(w http.ResponseWriter) error
}

type DeleteCodeSystem200JSONResponse CodeSystem

func (response DeleteCodeSystem200JSONResponse) VisitDeleteCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystem400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteCodeSystem400JSONResponse) VisitDeleteCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystem401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response DeleteCodeSystem401JSONResponse) VisitDeleteCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystem404JSONResponse ErrorResponse

func (response DeleteCodeSystem404JSONResponse) VisitDeleteCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystem500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteCodeSystem500JSONResponse) VisitDeleteCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRequestObject struct {
	CodesystemId CodesystemId `json:"codesystem_id"`
}

type GetCodeSystemResponseObject interface {
	VisitGetCodeSystemResponse(w http.ResponseWriter) error
}

type GetCodeSystem200JSONResponse GetCodeSystem

func (response GetCodeSystem200JSONResponse) VisitGetCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystem400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetCodeSystem400JSONResponse) VisitGetCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystem401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetCodeSystem401JSONResponse) VisitGetCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystem404JSONResponse ErrorResponse

func (response GetCodeSystem404JSONResponse) VisitGetCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystem500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetCodeSystem500JSONResponse) VisitGetCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConceptsRequestObject struct {
	CodesystemId CodesystemId `json:"codesystem_id"`
	Params       GetAllConceptsParams
}

type GetAllConceptsResponseObject interface {
	VisitGetAllConceptsResponse(w http.ResponseWriter) error
}

type GetAllConcepts200JSONResponse []Concept

func (response GetAllConcepts200JSONResponse) VisitGetAllConceptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConcepts400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllConcepts400JSONResponse) VisitGetAllConceptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConcepts401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetAllConcepts401JSONResponse) VisitGetAllConceptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConcepts404JSONResponse ErrorResponse

func (response GetAllConcepts404JSONResponse) VisitGetAllConceptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConcepts500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllConcepts500JSONResponse) VisitGetAllConceptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystemVersionRequestObject struct {
	CodesystemId CodesystemId `json:"codesystem_id"`
	Body         *CreateCodeSystemVersionJSONRequestBody
}

type CreateCodeSystemVersionResponseObject interface {
	VisitCreateCodeSystemVersionResponse(w http.ResponseWriter) error
}

type CreateCodeSystemVersion200JSONResponse CodeSystemVersion

func (response CreateCodeSystemVersion200JSONResponse) VisitCreateCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystemVersion400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response CreateCodeSystemVersion400JSONResponse) VisitCreateCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystemVersion401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response CreateCodeSystemVersion401JSONResponse) VisitCreateCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystemVersion404JSONResponse ErrorResponse

func (response CreateCodeSystemVersion404JSONResponse) VisitCreateCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystemVersion422JSONResponse ErrorResponse

func (response CreateCodeSystemVersion422JSONResponse) VisitCreateCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystemVersion500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateCodeSystemVersion500JSONResponse) VisitCreateCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemVersionRequestObject struct {
	CodesystemId CodesystemId `json:"codesystem_id"`
	Body         *UpdateCodeSystemVersionJSONRequestBody
}

type UpdateCodeSystemVersionResponseObject interface {
	VisitUpdateCodeSystemVersionResponse(w http.ResponseWriter) error
}

type UpdateCodeSystemVersion200JSONResponse CodeSystemVersion

func (response UpdateCodeSystemVersion200JSONResponse) VisitUpdateCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemVersion400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdateCodeSystemVersion400JSONResponse) VisitUpdateCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemVersion401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response UpdateCodeSystemVersion401JSONResponse) VisitUpdateCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemVersion404JSONResponse ErrorResponse

func (response UpdateCodeSystemVersion404JSONResponse) VisitUpdateCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemVersion422JSONResponse ErrorResponse

func (response UpdateCodeSystemVersion422JSONResponse) VisitUpdateCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemVersion500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateCodeSystemVersion500JSONResponse) VisitUpdateCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystemVersionRequestObject struct {
	CodesystemId        CodesystemId        `json:"codesystem_id"`
	CodesystemVersionId CodesystemVersionId `json:"codesystem-version_id"`
}

type DeleteCodeSystemVersionResponseObject interface {
	VisitDeleteCodeSystemVersionResponse(w http.ResponseWriter) error
}

type DeleteCodeSystemVersion200JSONResponse CodeSystemVersion

func (response DeleteCodeSystemVersion200JSONResponse) VisitDeleteCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystemVersion400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteCodeSystemVersion400JSONResponse) VisitDeleteCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystemVersion401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response DeleteCodeSystemVersion401JSONResponse) VisitDeleteCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystemVersion404JSONResponse ErrorResponse

func (response DeleteCodeSystemVersion404JSONResponse) VisitDeleteCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystemVersion500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteCodeSystemVersion500JSONResponse) VisitDeleteCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConceptsByVersionRequestObject struct {
	CodesystemId        CodesystemId        `json:"codesystem_id"`
	CodesystemVersionId CodesystemVersionId `json:"codesystem-version_id"`
	Params              GetAllConceptsByVersionParams
}

type GetAllConceptsByVersionResponseObject interface {
	VisitGetAllConceptsByVersionResponse(w http.ResponseWriter) error
}

type GetAllConceptsByVersion200JSONResponse []Concept

func (response GetAllConceptsByVersion200JSONResponse) VisitGetAllConceptsByVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConceptsByVersion400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllConceptsByVersion400JSONResponse) VisitGetAllConceptsByVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConceptsByVersion401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetAllConceptsByVersion401JSONResponse) VisitGetAllConceptsByVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConceptsByVersion404JSONResponse ErrorResponse

func (response GetAllConceptsByVersion404JSONResponse) VisitGetAllConceptsByVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConceptsByVersion500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllConceptsByVersion500JSONResponse) VisitGetAllConceptsByVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ImportCodeSystemVersionRequestObject struct {
	CodesystemId        CodesystemId        `json:"codesystem_id"`
	CodesystemVersionId CodesystemVersionId `json:"codesystem-version_id"`
	Body                *multipart.Reader
}

type ImportCodeSystemVersionResponseObject interface {
	VisitImportCodeSystemVersionResponse(w http.ResponseWriter) error
}

type ImportCodeSystemVersion202JSONResponse string

func (response ImportCodeSystemVersion202JSONResponse) VisitImportCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type ImportCodeSystemVersion400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response ImportCodeSystemVersion400JSONResponse) VisitImportCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ImportCodeSystemVersion401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response ImportCodeSystemVersion401JSONResponse) VisitImportCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ImportCodeSystemVersion404JSONResponse ErrorResponse

func (response ImportCodeSystemVersion404JSONResponse) VisitImportCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ImportCodeSystemVersion500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ImportCodeSystemVersion500JSONResponse) VisitImportCodeSystemVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PingRequestObject struct {
}

type PingResponseObject interface {
	VisitPingResponse(w http.ResponseWriter) error
}

type Ping200JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response Ping200JSONResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllProjectsRequestObject struct {
	Params GetAllProjectsParams
}

type GetAllProjectsResponseObject interface {
	VisitGetAllProjectsResponse(w http.ResponseWriter) error
}

type GetAllProjects200JSONResponse []Project

func (response GetAllProjects200JSONResponse) VisitGetAllProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllProjects400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllProjects400JSONResponse) VisitGetAllProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllProjects401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetAllProjects401JSONResponse) VisitGetAllProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllProjects404JSONResponse ErrorResponse

func (response GetAllProjects404JSONResponse) VisitGetAllProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllProjects500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllProjects500JSONResponse) VisitGetAllProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRequestObject struct {
	Body *CreateProjectJSONRequestBody
}

type CreateProjectResponseObject interface {
	VisitCreateProjectResponse(w http.ResponseWriter) error
}

type CreateProject200JSONResponse ProjectDetails

func (response CreateProject200JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProject400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response CreateProject400JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProject401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response CreateProject401JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateProject422JSONResponse ErrorResponse

func (response CreateProject422JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProject500JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRequestObject struct {
	Body *UpdateProjectJSONRequestBody
}

type UpdateProjectResponseObject interface {
	VisitUpdateProjectResponse(w http.ResponseWriter) error
}

type UpdateProject200JSONResponse Project

func (response UpdateProject200JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdateProject400JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response UpdateProject401JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response UpdateProject403JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject404JSONResponse ErrorResponse

func (response UpdateProject404JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject422JSONResponse ErrorResponse

func (response UpdateProject422JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProject500JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type DeleteProjectResponseObject interface {
	VisitDeleteProjectResponse(w http.ResponseWriter) error
}

type DeleteProject200JSONResponse Project

func (response DeleteProject200JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteProject400JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response DeleteProject401JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject404JSONResponse ErrorResponse

func (response DeleteProject404JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProject500JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type GetProjectResponseObject interface {
	VisitGetProjectResponse(w http.ResponseWriter) error
}

type GetProject200JSONResponse ProjectDetails

func (response GetProject200JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProject400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetProject400JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProject401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetProject401JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProject403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response GetProject403JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetProject404JSONResponse ErrorResponse

func (response GetProject404JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetProject500JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRolesRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type GetAllCodeSystemRolesResponseObject interface {
	VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error
}

type GetAllCodeSystemRoles200JSONResponse []CodeSystemRole

func (response GetAllCodeSystemRoles200JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRoles400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllCodeSystemRoles400JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRoles401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetAllCodeSystemRoles401JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRoles403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response GetAllCodeSystemRoles403JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRoles404JSONResponse ErrorResponse

func (response GetAllCodeSystemRoles404JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRoles500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllCodeSystemRoles500JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRoleRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *UpdateCodeSystemRoleJSONRequestBody
}

type UpdateCodeSystemRoleResponseObject interface {
	VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error
}

type UpdateCodeSystemRole200JSONResponse CodeSystemRole

func (response UpdateCodeSystemRole200JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdateCodeSystemRole400JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response UpdateCodeSystemRole401JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response UpdateCodeSystemRole403JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole404JSONResponse ErrorResponse

func (response UpdateCodeSystemRole404JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole422JSONResponse ErrorResponse

func (response UpdateCodeSystemRole422JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateCodeSystemRole500JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRoleRequestObject struct {
	ProjectId        ProjectId        `json:"project_id"`
	CodesystemRoleId CodesystemRoleId `json:"codesystem-role_id"`
}

type GetCodeSystemRoleResponseObject interface {
	VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error
}

type GetCodeSystemRole200JSONResponse CodeSystemRole

func (response GetCodeSystemRole200JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRole400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetCodeSystemRole400JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRole401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetCodeSystemRole401JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRole403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response GetCodeSystemRole403JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRole404JSONResponse ErrorResponse

func (response GetCodeSystemRole404JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRole500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetCodeSystemRole500JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappingsRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Params    GetAllMappingsParams
}

type GetAllMappingsResponseObject interface {
	VisitGetAllMappingsResponse(w http.ResponseWriter) error
}

type GetAllMappings200JSONResponse []Mapping

func (response GetAllMappings200JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappings400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllMappings400JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappings401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetAllMappings401JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappings403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response GetAllMappings403JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappings404JSONResponse ErrorResponse

func (response GetAllMappings404JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappings500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllMappings500JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchMappingRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *PatchMappingJSONRequestBody
}

type PatchMappingResponseObject interface {
	VisitPatchMappingResponse(w http.ResponseWriter) error
}

type PatchMapping200JSONResponse Mapping

func (response PatchMapping200JSONResponse) VisitPatchMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchMapping400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response PatchMapping400JSONResponse) VisitPatchMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchMapping401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response PatchMapping401JSONResponse) VisitPatchMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchMapping403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response PatchMapping403JSONResponse) VisitPatchMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchMapping404JSONResponse ErrorResponse

func (response PatchMapping404JSONResponse) VisitPatchMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchMapping422JSONResponse ErrorResponse

func (response PatchMapping422JSONResponse) VisitPatchMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PatchMapping500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PatchMapping500JSONResponse) VisitPatchMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateMappingRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *CreateMappingJSONRequestBody
}

type CreateMappingResponseObject interface {
	VisitCreateMappingResponse(w http.ResponseWriter) error
}

type CreateMapping200JSONResponse Mapping

func (response CreateMapping200JSONResponse) VisitCreateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateMapping400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response CreateMapping400JSONResponse) VisitCreateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateMapping401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response CreateMapping401JSONResponse) VisitCreateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateMapping403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response CreateMapping403JSONResponse) VisitCreateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateMapping404JSONResponse ErrorResponse

func (response CreateMapping404JSONResponse) VisitCreateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateMapping422JSONResponse ErrorResponse

func (response CreateMapping422JSONResponse) VisitCreateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateMapping500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateMapping500JSONResponse) VisitCreateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMappingRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *UpdateMappingJSONRequestBody
}

type UpdateMappingResponseObject interface {
	VisitUpdateMappingResponse(w http.ResponseWriter) error
}

type UpdateMapping200JSONResponse Mapping

func (response UpdateMapping200JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdateMapping400JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response UpdateMapping401JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response UpdateMapping403JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping404JSONResponse ErrorResponse

func (response UpdateMapping404JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping422JSONResponse ErrorResponse

func (response UpdateMapping422JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateMapping500JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMappingRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	MappingId MappingId `json:"mapping_id"`
}

type DeleteMappingResponseObject interface {
	VisitDeleteMappingResponse(w http.ResponseWriter) error
}

type DeleteMapping200JSONResponse Mapping

func (response DeleteMapping200JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMapping400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteMapping400JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMapping401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response DeleteMapping401JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMapping403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response DeleteMapping403JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMapping404JSONResponse ErrorResponse

func (response DeleteMapping404JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMapping500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteMapping500JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMappingRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	MappingId MappingId `json:"mapping_id"`
}

type GetMappingResponseObject interface {
	VisitGetMappingResponse(w http.ResponseWriter) error
}

type GetMapping200JSONResponse Mapping

func (response GetMapping200JSONResponse) VisitGetMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMapping400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetMapping400JSONResponse) VisitGetMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMapping401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetMapping401JSONResponse) VisitGetMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMapping403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response GetMapping403JSONResponse) VisitGetMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetMapping404JSONResponse ErrorResponse

func (response GetMapping404JSONResponse) VisitGetMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMapping500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetMapping500JSONResponse) VisitGetMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissionsRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type GetAllPermissionsResponseObject interface {
	VisitGetAllPermissionsResponse(w http.ResponseWriter) error
}

type GetAllPermissions200JSONResponse []ProjectPermission

func (response GetAllPermissions200JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissions400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllPermissions400JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissions401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetAllPermissions401JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissions403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response GetAllPermissions403JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissions404JSONResponse ErrorResponse

func (response GetAllPermissions404JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissions500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllPermissions500JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermissionRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *CreatePermissionJSONRequestBody
}

type CreatePermissionResponseObject interface {
	VisitCreatePermissionResponse(w http.ResponseWriter) error
}

type CreatePermission200JSONResponse ProjectPermission

func (response CreatePermission200JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response CreatePermission400JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response CreatePermission401JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response CreatePermission403JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission404JSONResponse ErrorResponse

func (response CreatePermission404JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission422JSONResponse ErrorResponse

func (response CreatePermission422JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreatePermission500JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermissionRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *UpdatePermissionJSONRequestBody
}

type UpdatePermissionResponseObject interface {
	VisitUpdatePermissionResponse(w http.ResponseWriter) error
}

type UpdatePermission200JSONResponse ProjectPermission

func (response UpdatePermission200JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdatePermission400JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response UpdatePermission401JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response UpdatePermission403JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission404JSONResponse ErrorResponse

func (response UpdatePermission404JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission422JSONResponse ErrorResponse

func (response UpdatePermission422JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdatePermission500JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermissionRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	UserId    UserId    `json:"user_id"`
}

type DeletePermissionResponseObject interface {
	VisitDeletePermissionResponse(w http.ResponseWriter) error
}

type DeletePermission200JSONResponse ProjectPermission

func (response DeletePermission200JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeletePermission400JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response DeletePermission401JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response DeletePermission403JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission404JSONResponse ErrorResponse

func (response DeletePermission404JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeletePermission500JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPermissionRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	UserId    UserId    `json:"user_id"`
}

type GetPermissionResponseObject interface {
	VisitGetPermissionResponse(w http.ResponseWriter) error
}

type GetPermission200JSONResponse ProjectPermission

func (response GetPermission200JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPermission400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetPermission400JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPermission401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetPermission401JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPermission403JSONResponse struct{ ForbiddenErrorJSONResponse }

func (response GetPermission403JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetPermission404JSONResponse ErrorResponse

func (response GetPermission404JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPermission500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPermission500JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllUsersRequestObject struct {
}

type GetAllUsersResponseObject interface {
	VisitGetAllUsersResponse(w http.ResponseWriter) error
}

type GetAllUsers200JSONResponse []User

func (response GetAllUsers200JSONResponse) VisitGetAllUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllUsers400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllUsers400JSONResponse) VisitGetAllUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllUsers401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetAllUsers401JSONResponse) VisitGetAllUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllUsers500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllUsers500JSONResponse) VisitGetAllUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse User

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Login400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response Login400JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Login401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response Login401JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Login500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Login500JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserRequestObject struct {
	UserId UserId `json:"user_id"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser200JSONResponse User

func (response DeleteUser200JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteUser400JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response DeleteUser401JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser404JSONResponse ErrorResponse

func (response DeleteUser404JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteUser500JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all code systems
	// (GET /codesystems)
	GetAllCodeSystems(ctx context.Context, request GetAllCodeSystemsRequestObject) (GetAllCodeSystemsResponseObject, error)
	// Create a new code system
	// (POST /codesystems)
	CreateCodeSystem(ctx context.Context, request CreateCodeSystemRequestObject) (CreateCodeSystemResponseObject, error)
	// Update a code system by ID
	// (PUT /codesystems)
	UpdateCodeSystem(ctx context.Context, request UpdateCodeSystemRequestObject) (UpdateCodeSystemResponseObject, error)
	// Delete a code system by ID
	// (DELETE /codesystems/{codesystem_id})
	DeleteCodeSystem(ctx context.Context, request DeleteCodeSystemRequestObject) (DeleteCodeSystemResponseObject, error)
	// Get a code system by ID
	// (GET /codesystems/{codesystem_id})
	GetCodeSystem(ctx context.Context, request GetCodeSystemRequestObject) (GetCodeSystemResponseObject, error)
	// Get all concepts for a code system by ID
	// (GET /codesystems/{codesystem_id}/concepts)
	GetAllConcepts(ctx context.Context, request GetAllConceptsRequestObject) (GetAllConceptsResponseObject, error)
	// Create a new version for a code system by ID
	// (POST /codesystems/{codesystem_id}/versions)
	CreateCodeSystemVersion(ctx context.Context, request CreateCodeSystemVersionRequestObject) (CreateCodeSystemVersionResponseObject, error)
	// Update a code system version by ID
	// (PUT /codesystems/{codesystem_id}/versions)
	UpdateCodeSystemVersion(ctx context.Context, request UpdateCodeSystemVersionRequestObject) (UpdateCodeSystemVersionResponseObject, error)
	// Delete a code system version by ID
	// (DELETE /codesystems/{codesystem_id}/versions/{codesystem-version_id})
	DeleteCodeSystemVersion(ctx context.Context, request DeleteCodeSystemVersionRequestObject) (DeleteCodeSystemVersionResponseObject, error)
	// Get all concepts for a code system version by ID
	// (GET /codesystems/{codesystem_id}/versions/{codesystem-version_id}/concepts)
	GetAllConceptsByVersion(ctx context.Context, request GetAllConceptsByVersionRequestObject) (GetAllConceptsByVersionResponseObject, error)
	// Import concepts for a code system version by ID
	// (POST /codesystems/{codesystem_id}/versions/{codesystem-version_id}/import)
	ImportCodeSystemVersion(ctx context.Context, request ImportCodeSystemVersionRequestObject) (ImportCodeSystemVersionResponseObject, error)
	// Check if the server is running
	// (GET /ping)
	Ping(ctx context.Context, request PingRequestObject) (PingResponseObject, error)
	// Get all projects
	// (GET /projects)
	GetAllProjects(ctx context.Context, request GetAllProjectsRequestObject) (GetAllProjectsResponseObject, error)
	// Create a new project
	// (POST /projects)
	CreateProject(ctx context.Context, request CreateProjectRequestObject) (CreateProjectResponseObject, error)
	// Update the project information
	// (PUT /projects)
	UpdateProject(ctx context.Context, request UpdateProjectRequestObject) (UpdateProjectResponseObject, error)
	// Delete a project
	// (DELETE /projects/{project_id})
	DeleteProject(ctx context.Context, request DeleteProjectRequestObject) (DeleteProjectResponseObject, error)
	// Get project details
	// (GET /projects/{project_id})
	GetProject(ctx context.Context, request GetProjectRequestObject) (GetProjectResponseObject, error)
	// Get all code system roles for a project
	// (GET /projects/{project_id}/codesystem-roles)
	GetAllCodeSystemRoles(ctx context.Context, request GetAllCodeSystemRolesRequestObject) (GetAllCodeSystemRolesResponseObject, error)
	// Update a code system role by ID
	// (PUT /projects/{project_id}/codesystem-roles)
	UpdateCodeSystemRole(ctx context.Context, request UpdateCodeSystemRoleRequestObject) (UpdateCodeSystemRoleResponseObject, error)
	// Get a code system role by ID
	// (GET /projects/{project_id}/codesystem-roles/{codesystem-role_id})
	GetCodeSystemRole(ctx context.Context, request GetCodeSystemRoleRequestObject) (GetCodeSystemRoleResponseObject, error)
	// Get all mappings for a project by project ID
	// (GET /projects/{project_id}/mappings)
	GetAllMappings(ctx context.Context, request GetAllMappingsRequestObject) (GetAllMappingsResponseObject, error)
	// Update a mapping and its elements by their concept IDs
	// (PATCH /projects/{project_id}/mappings)
	PatchMapping(ctx context.Context, request PatchMappingRequestObject) (PatchMappingResponseObject, error)
	// Create a new mapping for a project
	// (POST /projects/{project_id}/mappings)
	CreateMapping(ctx context.Context, request CreateMappingRequestObject) (CreateMappingResponseObject, error)
	// Update a mapping and its elements by their concept IDs
	// (PUT /projects/{project_id}/mappings)
	UpdateMapping(ctx context.Context, request UpdateMappingRequestObject) (UpdateMappingResponseObject, error)
	// Delete a mapping and its elements by ID
	// (DELETE /projects/{project_id}/mappings/{mapping_id})
	DeleteMapping(ctx context.Context, request DeleteMappingRequestObject) (DeleteMappingResponseObject, error)
	// Get a mapping with its elements by ID
	// (GET /projects/{project_id}/mappings/{mapping_id})
	GetMapping(ctx context.Context, request GetMappingRequestObject) (GetMappingResponseObject, error)
	// Get permissions for a project
	// (GET /projects/{project_id}/permissions)
	GetAllPermissions(ctx context.Context, request GetAllPermissionsRequestObject) (GetAllPermissionsResponseObject, error)
	// Create a new project permission for user
	// (POST /projects/{project_id}/permissions)
	CreatePermission(ctx context.Context, request CreatePermissionRequestObject) (CreatePermissionResponseObject, error)
	// Update a project permission for a user
	// (PUT /projects/{project_id}/permissions)
	UpdatePermission(ctx context.Context, request UpdatePermissionRequestObject) (UpdatePermissionResponseObject, error)
	// Delete a project permission for a user
	// (DELETE /projects/{project_id}/permissions/{user_id})
	DeletePermission(ctx context.Context, request DeletePermissionRequestObject) (DeletePermissionResponseObject, error)
	// Get project permission for a specific user
	// (GET /projects/{project_id}/permissions/{user_id})
	GetPermission(ctx context.Context, request GetPermissionRequestObject) (GetPermissionResponseObject, error)
	// Get all users
	// (GET /users)
	GetAllUsers(ctx context.Context, request GetAllUsersRequestObject) (GetAllUsersResponseObject, error)
	// Updates user-database with information from Access-Token
	// (POST /users/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Delete a user
	// (DELETE /users/{user_id})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAllCodeSystems operation middleware
func (sh *strictHandler) GetAllCodeSystems(ctx *gin.Context) {
	var request GetAllCodeSystemsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllCodeSystems(ctx, request.(GetAllCodeSystemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllCodeSystems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllCodeSystemsResponseObject); ok {
		if err := validResponse.VisitGetAllCodeSystemsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCodeSystem operation middleware
func (sh *strictHandler) CreateCodeSystem(ctx *gin.Context) {
	var request CreateCodeSystemRequestObject

	var body CreateCodeSystemJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCodeSystem(ctx, request.(CreateCodeSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCodeSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateCodeSystemResponseObject); ok {
		if err := validResponse.VisitCreateCodeSystemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCodeSystem operation middleware
func (sh *strictHandler) UpdateCodeSystem(ctx *gin.Context) {
	var request UpdateCodeSystemRequestObject

	var body UpdateCodeSystemJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCodeSystem(ctx, request.(UpdateCodeSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCodeSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateCodeSystemResponseObject); ok {
		if err := validResponse.VisitUpdateCodeSystemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCodeSystem operation middleware
func (sh *strictHandler) DeleteCodeSystem(ctx *gin.Context, codesystemId CodesystemId) {
	var request DeleteCodeSystemRequestObject

	request.CodesystemId = codesystemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCodeSystem(ctx, request.(DeleteCodeSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCodeSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCodeSystemResponseObject); ok {
		if err := validResponse.VisitDeleteCodeSystemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCodeSystem operation middleware
func (sh *strictHandler) GetCodeSystem(ctx *gin.Context, codesystemId CodesystemId) {
	var request GetCodeSystemRequestObject

	request.CodesystemId = codesystemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCodeSystem(ctx, request.(GetCodeSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCodeSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCodeSystemResponseObject); ok {
		if err := validResponse.VisitGetCodeSystemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllConcepts operation middleware
func (sh *strictHandler) GetAllConcepts(ctx *gin.Context, codesystemId CodesystemId, params GetAllConceptsParams) {
	var request GetAllConceptsRequestObject

	request.CodesystemId = codesystemId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllConcepts(ctx, request.(GetAllConceptsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllConcepts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllConceptsResponseObject); ok {
		if err := validResponse.VisitGetAllConceptsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCodeSystemVersion operation middleware
func (sh *strictHandler) CreateCodeSystemVersion(ctx *gin.Context, codesystemId CodesystemId) {
	var request CreateCodeSystemVersionRequestObject

	request.CodesystemId = codesystemId

	var body CreateCodeSystemVersionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCodeSystemVersion(ctx, request.(CreateCodeSystemVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCodeSystemVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateCodeSystemVersionResponseObject); ok {
		if err := validResponse.VisitCreateCodeSystemVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCodeSystemVersion operation middleware
func (sh *strictHandler) UpdateCodeSystemVersion(ctx *gin.Context, codesystemId CodesystemId) {
	var request UpdateCodeSystemVersionRequestObject

	request.CodesystemId = codesystemId

	var body UpdateCodeSystemVersionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCodeSystemVersion(ctx, request.(UpdateCodeSystemVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCodeSystemVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateCodeSystemVersionResponseObject); ok {
		if err := validResponse.VisitUpdateCodeSystemVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCodeSystemVersion operation middleware
func (sh *strictHandler) DeleteCodeSystemVersion(ctx *gin.Context, codesystemId CodesystemId, codesystemVersionId CodesystemVersionId) {
	var request DeleteCodeSystemVersionRequestObject

	request.CodesystemId = codesystemId
	request.CodesystemVersionId = codesystemVersionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCodeSystemVersion(ctx, request.(DeleteCodeSystemVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCodeSystemVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCodeSystemVersionResponseObject); ok {
		if err := validResponse.VisitDeleteCodeSystemVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllConceptsByVersion operation middleware
func (sh *strictHandler) GetAllConceptsByVersion(ctx *gin.Context, codesystemId CodesystemId, codesystemVersionId CodesystemVersionId, params GetAllConceptsByVersionParams) {
	var request GetAllConceptsByVersionRequestObject

	request.CodesystemId = codesystemId
	request.CodesystemVersionId = codesystemVersionId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllConceptsByVersion(ctx, request.(GetAllConceptsByVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllConceptsByVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllConceptsByVersionResponseObject); ok {
		if err := validResponse.VisitGetAllConceptsByVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ImportCodeSystemVersion operation middleware
func (sh *strictHandler) ImportCodeSystemVersion(ctx *gin.Context, codesystemId CodesystemId, codesystemVersionId CodesystemVersionId) {
	var request ImportCodeSystemVersionRequestObject

	request.CodesystemId = codesystemId
	request.CodesystemVersionId = codesystemVersionId

	if reader, err := ctx.Request.MultipartReader(); err == nil {
		request.Body = reader
	} else {
		ctx.Error(err)
		return
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ImportCodeSystemVersion(ctx, request.(ImportCodeSystemVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ImportCodeSystemVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ImportCodeSystemVersionResponseObject); ok {
		if err := validResponse.VisitImportCodeSystemVersionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Ping operation middleware
func (sh *strictHandler) Ping(ctx *gin.Context) {
	var request PingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ping(ctx, request.(PingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PingResponseObject); ok {
		if err := validResponse.VisitPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllProjects operation middleware
func (sh *strictHandler) GetAllProjects(ctx *gin.Context, params GetAllProjectsParams) {
	var request GetAllProjectsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllProjects(ctx, request.(GetAllProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllProjects")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllProjectsResponseObject); ok {
		if err := validResponse.VisitGetAllProjectsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProject operation middleware
func (sh *strictHandler) CreateProject(ctx *gin.Context) {
	var request CreateProjectRequestObject

	var body CreateProjectJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProject(ctx, request.(CreateProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateProjectResponseObject); ok {
		if err := validResponse.VisitCreateProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProject operation middleware
func (sh *strictHandler) UpdateProject(ctx *gin.Context) {
	var request UpdateProjectRequestObject

	var body UpdateProjectJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProject(ctx, request.(UpdateProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateProjectResponseObject); ok {
		if err := validResponse.VisitUpdateProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProject operation middleware
func (sh *strictHandler) DeleteProject(ctx *gin.Context, projectId ProjectId) {
	var request DeleteProjectRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProject(ctx, request.(DeleteProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteProjectResponseObject); ok {
		if err := validResponse.VisitDeleteProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProject operation middleware
func (sh *strictHandler) GetProject(ctx *gin.Context, projectId ProjectId) {
	var request GetProjectRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProject(ctx, request.(GetProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectResponseObject); ok {
		if err := validResponse.VisitGetProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllCodeSystemRoles operation middleware
func (sh *strictHandler) GetAllCodeSystemRoles(ctx *gin.Context, projectId ProjectId) {
	var request GetAllCodeSystemRolesRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllCodeSystemRoles(ctx, request.(GetAllCodeSystemRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllCodeSystemRoles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllCodeSystemRolesResponseObject); ok {
		if err := validResponse.VisitGetAllCodeSystemRolesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCodeSystemRole operation middleware
func (sh *strictHandler) UpdateCodeSystemRole(ctx *gin.Context, projectId ProjectId) {
	var request UpdateCodeSystemRoleRequestObject

	request.ProjectId = projectId

	var body UpdateCodeSystemRoleJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCodeSystemRole(ctx, request.(UpdateCodeSystemRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCodeSystemRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateCodeSystemRoleResponseObject); ok {
		if err := validResponse.VisitUpdateCodeSystemRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCodeSystemRole operation middleware
func (sh *strictHandler) GetCodeSystemRole(ctx *gin.Context, projectId ProjectId, codesystemRoleId CodesystemRoleId) {
	var request GetCodeSystemRoleRequestObject

	request.ProjectId = projectId
	request.CodesystemRoleId = codesystemRoleId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCodeSystemRole(ctx, request.(GetCodeSystemRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCodeSystemRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCodeSystemRoleResponseObject); ok {
		if err := validResponse.VisitGetCodeSystemRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllMappings operation middleware
func (sh *strictHandler) GetAllMappings(ctx *gin.Context, projectId ProjectId, params GetAllMappingsParams) {
	var request GetAllMappingsRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllMappings(ctx, request.(GetAllMappingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllMappings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllMappingsResponseObject); ok {
		if err := validResponse.VisitGetAllMappingsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchMapping operation middleware
func (sh *strictHandler) PatchMapping(ctx *gin.Context, projectId ProjectId) {
	var request PatchMappingRequestObject

	request.ProjectId = projectId

	var body PatchMappingJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchMapping(ctx, request.(PatchMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchMapping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchMappingResponseObject); ok {
		if err := validResponse.VisitPatchMappingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateMapping operation middleware
func (sh *strictHandler) CreateMapping(ctx *gin.Context, projectId ProjectId) {
	var request CreateMappingRequestObject

	request.ProjectId = projectId

	var body CreateMappingJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMapping(ctx, request.(CreateMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMapping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateMappingResponseObject); ok {
		if err := validResponse.VisitCreateMappingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateMapping operation middleware
func (sh *strictHandler) UpdateMapping(ctx *gin.Context, projectId ProjectId) {
	var request UpdateMappingRequestObject

	request.ProjectId = projectId

	var body UpdateMappingJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMapping(ctx, request.(UpdateMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMapping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateMappingResponseObject); ok {
		if err := validResponse.VisitUpdateMappingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMapping operation middleware
func (sh *strictHandler) DeleteMapping(ctx *gin.Context, projectId ProjectId, mappingId MappingId) {
	var request DeleteMappingRequestObject

	request.ProjectId = projectId
	request.MappingId = mappingId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMapping(ctx, request.(DeleteMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMapping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteMappingResponseObject); ok {
		if err := validResponse.VisitDeleteMappingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMapping operation middleware
func (sh *strictHandler) GetMapping(ctx *gin.Context, projectId ProjectId, mappingId MappingId) {
	var request GetMappingRequestObject

	request.ProjectId = projectId
	request.MappingId = mappingId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMapping(ctx, request.(GetMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMapping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMappingResponseObject); ok {
		if err := validResponse.VisitGetMappingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllPermissions operation middleware
func (sh *strictHandler) GetAllPermissions(ctx *gin.Context, projectId ProjectId) {
	var request GetAllPermissionsRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllPermissions(ctx, request.(GetAllPermissionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllPermissions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllPermissionsResponseObject); ok {
		if err := validResponse.VisitGetAllPermissionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePermission operation middleware
func (sh *strictHandler) CreatePermission(ctx *gin.Context, projectId ProjectId) {
	var request CreatePermissionRequestObject

	request.ProjectId = projectId

	var body CreatePermissionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePermission(ctx, request.(CreatePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePermissionResponseObject); ok {
		if err := validResponse.VisitCreatePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePermission operation middleware
func (sh *strictHandler) UpdatePermission(ctx *gin.Context, projectId ProjectId) {
	var request UpdatePermissionRequestObject

	request.ProjectId = projectId

	var body UpdatePermissionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePermission(ctx, request.(UpdatePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdatePermissionResponseObject); ok {
		if err := validResponse.VisitUpdatePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePermission operation middleware
func (sh *strictHandler) DeletePermission(ctx *gin.Context, projectId ProjectId, userId UserId) {
	var request DeletePermissionRequestObject

	request.ProjectId = projectId
	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePermission(ctx, request.(DeletePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeletePermissionResponseObject); ok {
		if err := validResponse.VisitDeletePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPermission operation middleware
func (sh *strictHandler) GetPermission(ctx *gin.Context, projectId ProjectId, userId UserId) {
	var request GetPermissionRequestObject

	request.ProjectId = projectId
	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPermission(ctx, request.(GetPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPermissionResponseObject); ok {
		if err := validResponse.VisitGetPermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllUsers operation middleware
func (sh *strictHandler) GetAllUsers(ctx *gin.Context) {
	var request GetAllUsersRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllUsers(ctx, request.(GetAllUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllUsersResponseObject); ok {
		if err := validResponse.VisitGetAllUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(ctx *gin.Context, userId UserId) {
	var request DeleteUserRequestObject

	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdW3Pbtpf/KhjuPiQztOVc/v/t+i1x0ox3m8YTx9mHNtOByCMJLQmwAGjX9fi77+DG",
	"K3izJVtO2YfGknA5AM7v3HAA3AQRSzNGgUoRHN8EGeY4BQlcf4pYDOJaSEgPOEvgNxKrb2MQESeZJIwG",
	"x8GXDaDTd4itkNwAUjWQqYJUlSAMiCqVYbkJwoDiFIJjX7thwOHPnHCIg2PJcwgDEW0gxarDFeMplsFx",
	"QKh89TIIg5RQkuZpcPwiDOR1BuYnWAMPbm/DavOXwAVhdATlJ0Ul9NVUGqS90vhuyJ9E9hC52yYzxVlG",
	"6HoEjbakn8BKM2Op+/frYeoyvIY2XWd4DYjm6RI4epbmQqIlIIwyJogkl4BsC88dqX/mwK9LWnWjVapi",
	"WOE8kZqIEQSdk789RP1s6GErRCSkAmXAkSqNntkm0YsQpfgv8+fRUR91ugc/hUfqv2EyOfsdIjliVW1J",
	"/6pWmtkmzwnG5SceA28Tp79WtKkyhK7RMywixDhSxbqmrGzPO2cBFlEQBkAVRb/YT6q94FtBnpBc8bai",
	"LhfAR0ycKuafNddA35Q1u71VhUXGqAAts9/i+DP8mYOQ7zln3IhxKoFK9SfOsoREWNG1+F0o4m76264P",
	"5JRe4oTEyPaAnsHh+jBEFNbY4CdGIlddQBwiYgsvWXxtSqKUCKHWZkUgiZ+r1dELgkq18zy4DYMfGV+S",
	"OAa6gyEUbaNnhIp8tSIRASoV6jR1jBoaTqkETnFyDvwS+E7m0nSATA9Id4HiHJBkKMYSL7EANUUkzRJI",
	"gUrdFQJVTigSLyjO5YZx8jfEOyCw2rySRWbpFEF2YSMOMVBJcKKm7NZxqWVDAUo3nRvdpEwLzjLgkhg2",
	"NU176GhQ4fndgMXzgyQy6fhFf3FTIPnD+5/ffz49CcLgp0+nP5944BwGOSe+aapi8xddyFJkmyibYkst",
	"H2/DxmQ486I1JxwSwAJ+i7GEmnTUX3hIdAZIx4w0aK2VDuu9dVF9ZoV8i9ahRVL9XuIEaAS/lUQUBZeM",
	"JYBp73IKiWUuBmpflpPZP3o76svCtquOoIPeNg2+eaqzOU6ST6vg+Jeb4D85rILj4D8WpYm9sAhZnHDA",
	"sgqQ27A5w0aRtDSkRytWh0l8NH6rUfmZGZSMo/Qii2uU6tptakUHzkeOoocNKPwlv3au8gQO0Iq1wQbt",
	"uWpUsuMamtMKgeOm1S8SRnPBgJ00kiNoBJkH28pnuJNkbhOrTfX2YqeAqarTDfuqtMaRMi5UQ5zgREM3",
	"4xBhqSEaExGxnON1DZ59PKDHVxJRdOkFdxOod1xhO+WN1hwU6/PfLRELEkYAqqnzBMt5pGcR8zVIr86r",
	"YGmq4LHAKnzRUtB2qkUzGx+td+hhwzS1lkxbvRiLyEBEeU3qj77VeG8qlBMTYM7xdUNVVeeLQ6I47ECy",
	"qnpQ/o6ZyQMiDijmnF0BP5AbTA/sxFYLLDnDcet3yuSBbd67DD0QILT4MwMaqwpepu+YbKvP34HEJBHT",
	"mNnZAm0hpQD1m40ycJbA+GXxAsKzRs6frFjpo/s4Bxpb2s+K6u1OGvzcHpOfCr9sdezmla117I+AclRK",
	"6kHhqsahnYHP1iv04ufHPEkqNI5jghJD7VEVBPauti1mtfrJxFq33qn+APJOFlif7WWF1wQ+9qjyfv4q",
	"uvAzUEUqTrHTXDXPEmmkxduRplX28aA1ZTFZEW9njVkoSoYFgRVy/FNT8UmmTE2P+OqZmnsNpZf+yTJ4",
	"J/J3p5J3G1K3dw4rLbe9aStf+wh0g9YhuYGyF8Jj9dhYnu7LZ+I4IV8aFZcErnQdN7HsiurPEBPJuNce",
	"8Guwe4/YxioHIhxlTLJrkF4XcQee4HSLtscD7LRK64J0okffLX9H+kZjnbe6TNuSHbflkMOFRVW9E0gx",
	"Sbzru8qTpHPxiV8+K/YcF/7Si18U9zr+AqKcE3l9rmbLhtMBc+BvcrlRn5b6049ugv7n/764jQMdltK/",
	"lhO2kTJTNH5S1V/qqU3YVSX8Sf7WwdkT62/XvrzgiW3ieLFIWISTDRPy+IejH14sVMEFB5ykYpFiIYEv",
	"Ms4ki1iyYBlQEh9EjFKIpC6qaWSZDbzGqd55WHNMpUD6I8JRBEJonzhdqkVzP1M11MT9rjDI/oBt0abb",
	"qpl1WE+UtmEJXTHfTgoRiAi9j7LE0R9AY7RiXH/+ePr5zcnFR2QxiL4wlhyiU4kyzi5JDAJhit6cnSLJ",
	"UIopXhd7WAJdEblRjRCOIsbNhopyrtzepTjUO63ICDiBIkzREmwzMcICXUGSHKIvG9Bd5AIE+l+4jhKG",
	"/9AUqqEBlTYejzCNUW29D4MwSEgE1mK3O0Ifzn46eHV4hH6yv4RBXsy9OF4srq6uDtc0P2R8vbC1xWKd",
	"JarS4UamSSUuHvgmCL01s1jx2I+DF4dHh0eqplownJHgOHilvwr1hpXmo0W5s6w/KwHcWq4PIBFOkmpa",
	"gFADVfJAj/o0NqXeJEmpP0TQ2NN6eXQ0aWtjlHFS9xvahklrP+Q8L1Dw2hDka74gfNHcidP1XgzXa2/r",
	"3IbBv8b06Nuz0nItT1PMrzsWRCvQtXDm14ELeSrjjwnPqhpVhzCicFVt6RB9osm1ESkGIsYQHlj+VojN",
	"yG0Q8i2Lryct/LSQe11DSJ7D7T0Zb6zDuWfM9fro9daGWY89eEZazgOiTKIVy2msiXj58uGI+IoTEhtJ",
	"/P6vCMzX94aZNR+0FeaU/i9W435T5lbVmih/+FZFaBe4+lCae0BqDESEaylZy2t0+q4N09yU7Ydp08rf",
	"FUxngO4BQMU+AXQ7OnAb4OwGVSc8b8OaqbS4qWXk3RrgJiA9iWHv9PfjIGzaGICwabAG4WrCZ4fvWBZZ",
	"1LMJ1dzMaHwkND4+GLrZs0dXdbsJHi73eQpPg3sbzsVs722bgesezfbk8cJuZY3xaU1B4937ZPQZXis3",
	"W7n6LinVxg1EBpHeLFBFmymQ3Q6ypeyefB8OVtB5ziPL6YxjVbaRZkkgiZFkeuT6f2+ve5Jw9Y++DFyb",
	"q+FCvo3UDV/Ed5DqMum3TbYAzKNNEVKy3fmo1hu5unTQl57b10OZgOLrwP46oo9vDxEuqezd7nWg5LuT",
	"bSNETU3YmWUaFnTVPe4RcR5bvFvaDcd+XBsjYkDlEZz7q/jt+6gdyXuP5a7WCJihOIeVhsJKA1j2204H",
	"Rc7spJCT62t06KlHSjRDUPstJWYJMUuIpxzXqiF3UCaMNTeqP1RO0E4PhA0IlnZArEewNANjWxIs4YQK",
	"1dPEDxRYm6VCXSowjlqT8ySCbg+L1K2ESBro3VGo5O31YyN5DrbMwZY52PKdBFu65ezUoEunbCVpxrjs",
	"jsmc6t8nSNYvGlm2NOaATA8QoxVnKcLo5PwrWpEETFGT/FncLnL+FblrMn7VKAwtUn4NWqLXkLZnRlSX",
	"W5fmiSQZ5nKhRnwQY4nrrFpPWlUT5L/XwU2fEr928cIA/sJpljjJVcwZffHyVShBSCeN0Itf6et//TvE",
	"lMkNFELqV/pfP/x3KDeEx+VXQVhm5i4JxVp89ae8aqo9ma4jvNBpLlE5XjUdRCBCrUjnHCJpueoQnUvM",
	"pZ0mreMdY1J25RnNLOz2cNt3ogQaZY66VHuvNalzfoHGGSNUOrMwF6AtnmgD0R+IGHElzE0aRCCeU4Ua",
	"nf7LQeacCoSR0FdpoIzRNUpBCLyGtgV5ZqyEeyn5uvCwXdWBoogIRpzc7AFBfUXr4b7eaamsiTv6bJbB",
	"pkMPGvb1vOlMGe8miRmdV6x3nAh2ZxP+zNEyVX3skT2tjxw4a9qeO9ERzOKoG4nvbVY/iEFanhkZa5Cu",
	"8gQV6/oPENjmajEnqt3NSFnlwjHJGNqQ9eb5DozWrESLQ7a7n2tkHrctbhFdHvbTPnnzWj+Bnhn1nuQp",
	"LbS9PSuBJF4m8NyemKjVUlJBzdESULTBVB+dWEngZrPQnoLw7QyeFZeN7S41vHEu84GD9b7e98n4mbfR",
	"rjsg04W5ni2yyv15iFBjHWv1+Y6B0AjJKwUrYHSxklwAF6gSOJmMzo7Ntd0CrXES+1EQtod+xavhmo0r",
	"8R5cu1lm/d621ps7YB3A9EK8ajEvbsobL8dtZbleijANUdZ0khir2e5eKdXuTiBqReyuRmhcwukOIKp/",
	"u0RGUZTGfqnRtS1WioSJhnh5B+hON7T2F9ePDdA92q7q15WdzmaVcWNjGhnEIEKjJNdHdFWZhAgdtHRl",
	"t2HA+hzTJ4KFvbUin6qq26K71mDnaapl0bg6fdLRa8f5vVxv43kV9eT+1LG8/pPbn91FWY8Gjq3cejOj",
	"Zu9Q42flGq+2kXTQQsuQY0Zxqu9cVvzgNsia3ToAdeDHRb37Uxc/m8cR7gmUXXloTYA8Vt5i2fsMxzvB",
	"kXHUwMB3lfvYn8Coh9vchOoRDeO1bm373j5hctuvircjRmrnCu8tQyZtrbuXWh4oOXGG/o6hv7Pzl9uD",
	"nQt9DBq5RYykx3g1+S1FSeM/mhBLEVXRmx9uZ3vrWYkf3XB2i9mtb4Au77/5aT5ULlouLjkOi3ueq1eA",
	"FpdpPond0fLWv9mReNr7qGMESUWquZettFuBZbTpORTl9LsJX+n735LEiaFKZHd5jXLh4lr1y+isZEKn",
	"78Qh+mgfZCkqYg42bhx7sloUdR+Lh7j21O8ogPSwDket2xmvdzU33L2C37eH4XCsEEykqAHX3SBZwLRL",
	"VgznY7huegRRJQauRAkFqAmSZzUjpXWzsglvtIWMbf95RybGHsuQxhW8swyZd5f3ZHd5GNldgqL3nPWW",
	"TYqOoOVsNcyIn62GR7cahsMki5vyMd1xSSgjBUhXZsg2JMOwN195IXinsccZz7vD85bg1GJcH5w6PfSe",
	"4PxYIOgYYtGZiyHK8oxdcZO8jYYekNgbDpyhM0PnQaFT53PNpSOB0614Gm8C9R8ZaqQkdkXpu44DVbra",
	"+/ySMe8ezUDZu8SsLg71bGOVZaeerylr2k5yAdxageZvHwjsCZWy1z10xjreWXyUJP8mATPU7qqTNEv+",
	"MwIzHRC1b7wNiYDeSM0U9HedzJnBP4N/Bv8ugjO96ByC/ijzeHFj31GcdjjoTuLCntrZjrgY9jHdA5EP",
	"ca5hRvbukL3tEM29QDXySFCrbbvlGY2zqj+AnGEyw+QxYFI9CdTPxWP0jz4OPhiC0aW6AiwXuomHiI6Y",
	"h5Sf0kUiW04yy+1Uu2XVq1xZyEXC1oRW74CrL9hP+ucdihH71PX3vyLGAhR6RfQdcEsswAZHy9PfJlPm",
	"jR77wRf9aG3P4k2z9Jye6j8D3jjTHZZqbYNbJ7y7dusujDCZpuQeRG0N8Ns/4Pj2xZb1zFbPbje0kOP4",
	"Zj/1Js3L0UFYa1uTafiuiYdLSFiWApX2urLaU8fNZ6aPND9agpptnevEcoSXLJeV+88qaesm87yd9v7J",
	"ocbVrlyrZOtmlcfTx1WuArfVTlWVj2hSjSaGFaEQu1f+EFvVItWN9lvnLUb0kpbnFNz1uJVn7QcqO+Vm",
	"a+bCe/Vvq1rjQeLKvb/u6a5pjRSXvXsbK64fHNVo8exW0ZC9nffb7f8HAAD//0jnQvxAmwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
