// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a code system by ID
	// (DELETE /code-system/{code-system_id})
	DeleteCodeSystem(c *gin.Context, codeSystemId CodeSystemId)
	// Get a code system by ID
	// (GET /code-system/{code-system_id})
	GetCodeSystem(c *gin.Context, codeSystemId CodeSystemId)
	// Update a code system by ID
	// (PUT /code-system/{code-system_id})
	UpdateCodeSystem(c *gin.Context, codeSystemId CodeSystemId)
	// Get all concepts for a code system by ID
	// (GET /code-system/{code-system_id}/concepts)
	GetAllConcepts(c *gin.Context, codeSystemId CodeSystemId, params GetAllConceptsParams)
	// Find a concept by code or meaning
	// (GET /code-system/{code-system_id}/find-concept)
	FindConceptByCode(c *gin.Context, codeSystemId CodeSystemId, params FindConceptByCodeParams)
	// Get all code systems
	// (GET /code-systems)
	GetAllCodeSystems(c *gin.Context)
	// Create a new code system
	// (POST /code-systems)
	CreateCodeSystem(c *gin.Context)
	// Check if the server is running
	// (GET /ping)
	Ping(c *gin.Context)
	// Delete a project
	// (DELETE /project/{project_id})
	DeleteProject(c *gin.Context, projectId ProjectId)
	// Get project details
	// (GET /project/{project_id})
	GetProject(c *gin.Context, projectId ProjectId)
	// Update the project information
	// (PUT /project/{project_id})
	UpdateProject(c *gin.Context, projectId ProjectId)
	// Get all code system roles for a project
	// (GET /project/{project_id}/code-system-roles)
	GetAllCodeSystemRoles(c *gin.Context, projectId ProjectId)
	// Get a code system role by ID
	// (GET /project/{project_id}/code-system-roles/{code-system-role_id})
	GetCodeSystemRole(c *gin.Context, projectId ProjectId, codeSystemRoleId CodeSystemRoleId)
	// Update a code system role by ID
	// (PUT /project/{project_id}/code-system-roles/{code-system-role_id})
	UpdateCodeSystemRole(c *gin.Context, projectId ProjectId, codeSystemRoleId CodeSystemRoleId)
	// Delete a mapping and its elements by ID
	// (DELETE /project/{project_id}/mapping/{mapping_id})
	DeleteMapping(c *gin.Context, projectId ProjectId, mappingId MappingId)
	// Get a mapping with its elements by ID
	// (GET /project/{project_id}/mapping/{mapping_id})
	GetMapping(c *gin.Context, projectId ProjectId, mappingId MappingId)
	// Get all mappings for a project by project ID
	// (GET /project/{project_id}/mappings)
	GetAllMappings(c *gin.Context, projectId ProjectId, params GetAllMappingsParams)
	// Create a new mapping for a project
	// (POST /project/{project_id}/mappings)
	CreateMapping(c *gin.Context, projectId ProjectId)
	// Update a mapping and its elements by their concept IDs
	// (PUT /project/{project_id}/mappings)
	UpdateMapping(c *gin.Context, projectId ProjectId)
	// Get permissions for a project
	// (GET /project/{project_id}/permissions)
	GetAllPermissions(c *gin.Context, projectId ProjectId)
	// Delete a project permission for a user
	// (DELETE /project/{project_id}/permissions/{user_id})
	DeletePermission(c *gin.Context, projectId ProjectId, userId UserId)
	// Get project permission for a specific user
	// (GET /project/{project_id}/permissions/{user_id})
	GetPermission(c *gin.Context, projectId ProjectId, userId UserId)
	// Create a new project permission for user
	// (POST /project/{project_id}/permissions/{user_id})
	CreatePermission(c *gin.Context, projectId ProjectId, userId UserId)
	// Update a project permission for a user
	// (PUT /project/{project_id}/permissions/{user_id})
	UpdatePermission(c *gin.Context, projectId ProjectId, userId UserId)
	// Get all projects
	// (GET /projects)
	GetAllProjects(c *gin.Context, params GetAllProjectsParams)
	// Create a new project
	// (POST /projects)
	CreateProject(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteCodeSystem operation middleware
func (siw *ServerInterfaceWrapper) DeleteCodeSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "code-system_id" -------------
	var codeSystemId CodeSystemId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system_id", c.Param("code-system_id"), &codeSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCodeSystem(c, codeSystemId)
}

// GetCodeSystem operation middleware
func (siw *ServerInterfaceWrapper) GetCodeSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "code-system_id" -------------
	var codeSystemId CodeSystemId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system_id", c.Param("code-system_id"), &codeSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCodeSystem(c, codeSystemId)
}

// UpdateCodeSystem operation middleware
func (siw *ServerInterfaceWrapper) UpdateCodeSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "code-system_id" -------------
	var codeSystemId CodeSystemId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system_id", c.Param("code-system_id"), &codeSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCodeSystem(c, codeSystemId)
}

// GetAllConcepts operation middleware
func (siw *ServerInterfaceWrapper) GetAllConcepts(c *gin.Context) {

	var err error

	// ------------- Path parameter "code-system_id" -------------
	var codeSystemId CodeSystemId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system_id", c.Param("code-system_id"), &codeSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllConceptsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllConcepts(c, codeSystemId, params)
}

// FindConceptByCode operation middleware
func (siw *ServerInterfaceWrapper) FindConceptByCode(c *gin.Context) {

	var err error

	// ------------- Path parameter "code-system_id" -------------
	var codeSystemId CodeSystemId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system_id", c.Param("code-system_id"), &codeSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindConceptByCodeParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "codeSearch" -------------

	err = runtime.BindQueryParameter("form", true, false, "codeSearch", c.Request.URL.Query(), &params.CodeSearch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter codeSearch: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "meaningSearch" -------------

	err = runtime.BindQueryParameter("form", true, false, "meaningSearch", c.Request.URL.Query(), &params.MeaningSearch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter meaningSearch: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FindConceptByCode(c, codeSystemId, params)
}

// GetAllCodeSystems operation middleware
func (siw *ServerInterfaceWrapper) GetAllCodeSystems(c *gin.Context) {

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllCodeSystems(c)
}

// CreateCodeSystem operation middleware
func (siw *ServerInterfaceWrapper) CreateCodeSystem(c *gin.Context) {

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCodeSystem(c)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Ping(c)
}

// DeleteProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProject(c, projectId)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProject(c, projectId)
}

// UpdateProject operation middleware
func (siw *ServerInterfaceWrapper) UpdateProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProject(c, projectId)
}

// GetAllCodeSystemRoles operation middleware
func (siw *ServerInterfaceWrapper) GetAllCodeSystemRoles(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllCodeSystemRoles(c, projectId)
}

// GetCodeSystemRole operation middleware
func (siw *ServerInterfaceWrapper) GetCodeSystemRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "code-system-role_id" -------------
	var codeSystemRoleId CodeSystemRoleId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system-role_id", c.Param("code-system-role_id"), &codeSystemRoleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system-role_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCodeSystemRole(c, projectId, codeSystemRoleId)
}

// UpdateCodeSystemRole operation middleware
func (siw *ServerInterfaceWrapper) UpdateCodeSystemRole(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "code-system-role_id" -------------
	var codeSystemRoleId CodeSystemRoleId

	err = runtime.BindStyledParameterWithOptions("simple", "code-system-role_id", c.Param("code-system-role_id"), &codeSystemRoleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code-system-role_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCodeSystemRole(c, projectId, codeSystemRoleId)
}

// DeleteMapping operation middleware
func (siw *ServerInterfaceWrapper) DeleteMapping(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "mapping_id" -------------
	var mappingId MappingId

	err = runtime.BindStyledParameterWithOptions("simple", "mapping_id", c.Param("mapping_id"), &mappingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mapping_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMapping(c, projectId, mappingId)
}

// GetMapping operation middleware
func (siw *ServerInterfaceWrapper) GetMapping(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "mapping_id" -------------
	var mappingId MappingId

	err = runtime.BindStyledParameterWithOptions("simple", "mapping_id", c.Param("mapping_id"), &mappingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mapping_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMapping(c, projectId, mappingId)
}

// GetAllMappings operation middleware
func (siw *ServerInterfaceWrapper) GetAllMappings(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllMappingsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllMappings(c, projectId, params)
}

// CreateMapping operation middleware
func (siw *ServerInterfaceWrapper) CreateMapping(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateMapping(c, projectId)
}

// UpdateMapping operation middleware
func (siw *ServerInterfaceWrapper) UpdateMapping(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateMapping(c, projectId)
}

// GetAllPermissions operation middleware
func (siw *ServerInterfaceWrapper) GetAllPermissions(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllPermissions(c, projectId)
}

// DeletePermission operation middleware
func (siw *ServerInterfaceWrapper) DeletePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePermission(c, projectId, userId)
}

// GetPermission operation middleware
func (siw *ServerInterfaceWrapper) GetPermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPermission(c, projectId, userId)
}

// CreatePermission operation middleware
func (siw *ServerInterfaceWrapper) CreatePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePermission(c, projectId, userId)
}

// UpdatePermission operation middleware
func (siw *ServerInterfaceWrapper) UpdatePermission(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePermission(c, projectId, userId)
}

// GetAllProjects operation middleware
func (siw *ServerInterfaceWrapper) GetAllProjects(c *gin.Context) {

	var err error

	c.Set(OAuth2Scopes, []string{"normal", "admin"})

	c.Set(BearerAuthScopes, []string{"normal", "admin"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllProjectsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllProjects(c, params)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(c *gin.Context) {

	c.Set(OAuth2Scopes, []string{"admin"})

	c.Set(BearerAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProject(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/code-system/:code-system_id", wrapper.DeleteCodeSystem)
	router.GET(options.BaseURL+"/code-system/:code-system_id", wrapper.GetCodeSystem)
	router.PUT(options.BaseURL+"/code-system/:code-system_id", wrapper.UpdateCodeSystem)
	router.GET(options.BaseURL+"/code-system/:code-system_id/concepts", wrapper.GetAllConcepts)
	router.GET(options.BaseURL+"/code-system/:code-system_id/find-concept", wrapper.FindConceptByCode)
	router.GET(options.BaseURL+"/code-systems", wrapper.GetAllCodeSystems)
	router.POST(options.BaseURL+"/code-systems", wrapper.CreateCodeSystem)
	router.GET(options.BaseURL+"/ping", wrapper.Ping)
	router.DELETE(options.BaseURL+"/project/:project_id", wrapper.DeleteProject)
	router.GET(options.BaseURL+"/project/:project_id", wrapper.GetProject)
	router.PUT(options.BaseURL+"/project/:project_id", wrapper.UpdateProject)
	router.GET(options.BaseURL+"/project/:project_id/code-system-roles", wrapper.GetAllCodeSystemRoles)
	router.GET(options.BaseURL+"/project/:project_id/code-system-roles/:code-system-role_id", wrapper.GetCodeSystemRole)
	router.PUT(options.BaseURL+"/project/:project_id/code-system-roles/:code-system-role_id", wrapper.UpdateCodeSystemRole)
	router.DELETE(options.BaseURL+"/project/:project_id/mapping/:mapping_id", wrapper.DeleteMapping)
	router.GET(options.BaseURL+"/project/:project_id/mapping/:mapping_id", wrapper.GetMapping)
	router.GET(options.BaseURL+"/project/:project_id/mappings", wrapper.GetAllMappings)
	router.POST(options.BaseURL+"/project/:project_id/mappings", wrapper.CreateMapping)
	router.PUT(options.BaseURL+"/project/:project_id/mappings", wrapper.UpdateMapping)
	router.GET(options.BaseURL+"/project/:project_id/permissions", wrapper.GetAllPermissions)
	router.DELETE(options.BaseURL+"/project/:project_id/permissions/:user_id", wrapper.DeletePermission)
	router.GET(options.BaseURL+"/project/:project_id/permissions/:user_id", wrapper.GetPermission)
	router.POST(options.BaseURL+"/project/:project_id/permissions/:user_id", wrapper.CreatePermission)
	router.PUT(options.BaseURL+"/project/:project_id/permissions/:user_id", wrapper.UpdatePermission)
	router.GET(options.BaseURL+"/projects", wrapper.GetAllProjects)
	router.POST(options.BaseURL+"/projects", wrapper.CreateProject)
}

type BadRequestErrorJSONResponse string

type InternalServerErrorJSONResponse string

type DeleteCodeSystemRequestObject struct {
	CodeSystemId CodeSystemId `json:"code-system_id"`
}

type DeleteCodeSystemResponseObject interface {
	VisitDeleteCodeSystemResponse(w http.ResponseWriter) error
}

type DeleteCodeSystem200JSONResponse CodeSystem

func (response DeleteCodeSystem200JSONResponse) VisitDeleteCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystem400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteCodeSystem400JSONResponse) VisitDeleteCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystem404JSONResponse ErrorResponse

func (response DeleteCodeSystem404JSONResponse) VisitDeleteCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCodeSystem500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteCodeSystem500JSONResponse) VisitDeleteCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRequestObject struct {
	CodeSystemId CodeSystemId `json:"code-system_id"`
}

type GetCodeSystemResponseObject interface {
	VisitGetCodeSystemResponse(w http.ResponseWriter) error
}

type GetCodeSystem200JSONResponse CodeSystem

func (response GetCodeSystem200JSONResponse) VisitGetCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystem400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetCodeSystem400JSONResponse) VisitGetCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystem404JSONResponse ErrorResponse

func (response GetCodeSystem404JSONResponse) VisitGetCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystem500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetCodeSystem500JSONResponse) VisitGetCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRequestObject struct {
	CodeSystemId CodeSystemId `json:"code-system_id"`
	Body         *UpdateCodeSystemJSONRequestBody
}

type UpdateCodeSystemResponseObject interface {
	VisitUpdateCodeSystemResponse(w http.ResponseWriter) error
}

type UpdateCodeSystem200JSONResponse CodeSystem

func (response UpdateCodeSystem200JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystem400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdateCodeSystem400JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystem404JSONResponse ErrorResponse

func (response UpdateCodeSystem404JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystem422JSONResponse ErrorResponse

func (response UpdateCodeSystem422JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystem500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateCodeSystem500JSONResponse) VisitUpdateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConceptsRequestObject struct {
	CodeSystemId CodeSystemId `json:"code-system_id"`
	Params       GetAllConceptsParams
}

type GetAllConceptsResponseObject interface {
	VisitGetAllConceptsResponse(w http.ResponseWriter) error
}

type GetAllConcepts200JSONResponse []Concept

func (response GetAllConcepts200JSONResponse) VisitGetAllConceptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConcepts400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllConcepts400JSONResponse) VisitGetAllConceptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConcepts404JSONResponse ErrorResponse

func (response GetAllConcepts404JSONResponse) VisitGetAllConceptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllConcepts500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllConcepts500JSONResponse) VisitGetAllConceptsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type FindConceptByCodeRequestObject struct {
	CodeSystemId CodeSystemId `json:"code-system_id"`
	Params       FindConceptByCodeParams
}

type FindConceptByCodeResponseObject interface {
	VisitFindConceptByCodeResponse(w http.ResponseWriter) error
}

type FindConceptByCode200JSONResponse []Concept

func (response FindConceptByCode200JSONResponse) VisitFindConceptByCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindConceptByCode400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response FindConceptByCode400JSONResponse) VisitFindConceptByCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindConceptByCode404JSONResponse ErrorResponse

func (response FindConceptByCode404JSONResponse) VisitFindConceptByCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FindConceptByCode500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response FindConceptByCode500JSONResponse) VisitFindConceptByCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemsRequestObject struct {
}

type GetAllCodeSystemsResponseObject interface {
	VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error
}

type GetAllCodeSystems200JSONResponse []CodeSystem

func (response GetAllCodeSystems200JSONResponse) VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystems400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllCodeSystems400JSONResponse) VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystems404JSONResponse ErrorResponse

func (response GetAllCodeSystems404JSONResponse) VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystems500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllCodeSystems500JSONResponse) VisitGetAllCodeSystemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystemRequestObject struct {
	Body *CreateCodeSystemJSONRequestBody
}

type CreateCodeSystemResponseObject interface {
	VisitCreateCodeSystemResponse(w http.ResponseWriter) error
}

type CreateCodeSystem200JSONResponse CodeSystem

func (response CreateCodeSystem200JSONResponse) VisitCreateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystem400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response CreateCodeSystem400JSONResponse) VisitCreateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystem404JSONResponse ErrorResponse

func (response CreateCodeSystem404JSONResponse) VisitCreateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystem422JSONResponse ErrorResponse

func (response CreateCodeSystem422JSONResponse) VisitCreateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateCodeSystem500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateCodeSystem500JSONResponse) VisitCreateCodeSystemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PingRequestObject struct {
}

type PingResponseObject interface {
	VisitPingResponse(w http.ResponseWriter) error
}

type Ping200JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response Ping200JSONResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type DeleteProjectResponseObject interface {
	VisitDeleteProjectResponse(w http.ResponseWriter) error
}

type DeleteProject200JSONResponse Project

func (response DeleteProject200JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteProject400JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject404JSONResponse ErrorResponse

func (response DeleteProject404JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteProject500JSONResponse) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type GetProjectResponseObject interface {
	VisitGetProjectResponse(w http.ResponseWriter) error
}

type GetProject200JSONResponse ProjectDetails

func (response GetProject200JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProject400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetProject400JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProject404JSONResponse ErrorResponse

func (response GetProject404JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetProject500JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProjectRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *UpdateProjectJSONRequestBody
}

type UpdateProjectResponseObject interface {
	VisitUpdateProjectResponse(w http.ResponseWriter) error
}

type UpdateProject200JSONResponse Project

func (response UpdateProject200JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdateProject400JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject404JSONResponse ErrorResponse

func (response UpdateProject404JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject422JSONResponse ErrorResponse

func (response UpdateProject422JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateProject500JSONResponse) VisitUpdateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRolesRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type GetAllCodeSystemRolesResponseObject interface {
	VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error
}

type GetAllCodeSystemRoles200JSONResponse []CodeSystemRole

func (response GetAllCodeSystemRoles200JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRoles400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllCodeSystemRoles400JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRoles404JSONResponse ErrorResponse

func (response GetAllCodeSystemRoles404JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllCodeSystemRoles500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllCodeSystemRoles500JSONResponse) VisitGetAllCodeSystemRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRoleRequestObject struct {
	ProjectId        ProjectId        `json:"project_id"`
	CodeSystemRoleId CodeSystemRoleId `json:"code-system-role_id"`
}

type GetCodeSystemRoleResponseObject interface {
	VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error
}

type GetCodeSystemRole200JSONResponse CodeSystemRole

func (response GetCodeSystemRole200JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRole400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetCodeSystemRole400JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRole404JSONResponse ErrorResponse

func (response GetCodeSystemRole404JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCodeSystemRole500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetCodeSystemRole500JSONResponse) VisitGetCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRoleRequestObject struct {
	ProjectId        ProjectId        `json:"project_id"`
	CodeSystemRoleId CodeSystemRoleId `json:"code-system-role_id"`
	Body             *UpdateCodeSystemRoleJSONRequestBody
}

type UpdateCodeSystemRoleResponseObject interface {
	VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error
}

type UpdateCodeSystemRole200JSONResponse CodeSystemRole

func (response UpdateCodeSystemRole200JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdateCodeSystemRole400JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole404JSONResponse ErrorResponse

func (response UpdateCodeSystemRole404JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole422JSONResponse ErrorResponse

func (response UpdateCodeSystemRole422JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCodeSystemRole500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateCodeSystemRole500JSONResponse) VisitUpdateCodeSystemRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMappingRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	MappingId MappingId `json:"mapping_id"`
}

type DeleteMappingResponseObject interface {
	VisitDeleteMappingResponse(w http.ResponseWriter) error
}

type DeleteMapping200JSONResponse Mapping

func (response DeleteMapping200JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMapping400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteMapping400JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMapping404JSONResponse ErrorResponse

func (response DeleteMapping404JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMapping500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteMapping500JSONResponse) VisitDeleteMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMappingRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	MappingId MappingId `json:"mapping_id"`
}

type GetMappingResponseObject interface {
	VisitGetMappingResponse(w http.ResponseWriter) error
}

type GetMapping200JSONResponse Mapping

func (response GetMapping200JSONResponse) VisitGetMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMapping400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetMapping400JSONResponse) VisitGetMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMapping404JSONResponse ErrorResponse

func (response GetMapping404JSONResponse) VisitGetMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMapping500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetMapping500JSONResponse) VisitGetMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappingsRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Params    GetAllMappingsParams
}

type GetAllMappingsResponseObject interface {
	VisitGetAllMappingsResponse(w http.ResponseWriter) error
}

type GetAllMappings200JSONResponse []Mapping

func (response GetAllMappings200JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappings400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllMappings400JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappings404JSONResponse ErrorResponse

func (response GetAllMappings404JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllMappings500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllMappings500JSONResponse) VisitGetAllMappingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateMappingRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *CreateMappingJSONRequestBody
}

type CreateMappingResponseObject interface {
	VisitCreateMappingResponse(w http.ResponseWriter) error
}

type CreateMapping200JSONResponse Mapping

func (response CreateMapping200JSONResponse) VisitCreateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateMapping400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response CreateMapping400JSONResponse) VisitCreateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateMapping404JSONResponse ErrorResponse

func (response CreateMapping404JSONResponse) VisitCreateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateMapping422JSONResponse ErrorResponse

func (response CreateMapping422JSONResponse) VisitCreateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateMapping500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateMapping500JSONResponse) VisitCreateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMappingRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	Body      *UpdateMappingJSONRequestBody
}

type UpdateMappingResponseObject interface {
	VisitUpdateMappingResponse(w http.ResponseWriter) error
}

type UpdateMapping200JSONResponse Mapping

func (response UpdateMapping200JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdateMapping400JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping404JSONResponse ErrorResponse

func (response UpdateMapping404JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping422JSONResponse ErrorResponse

func (response UpdateMapping422JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMapping500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateMapping500JSONResponse) VisitUpdateMappingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissionsRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
}

type GetAllPermissionsResponseObject interface {
	VisitGetAllPermissionsResponse(w http.ResponseWriter) error
}

type GetAllPermissions200JSONResponse []ProjectPermission

func (response GetAllPermissions200JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissions400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllPermissions400JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissions404JSONResponse ErrorResponse

func (response GetAllPermissions404JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPermissions500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllPermissions500JSONResponse) VisitGetAllPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermissionRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	UserId    UserId    `json:"user_id"`
}

type DeletePermissionResponseObject interface {
	VisitDeletePermissionResponse(w http.ResponseWriter) error
}

type DeletePermission200JSONResponse ProjectPermission

func (response DeletePermission200JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeletePermission400JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission404JSONResponse ErrorResponse

func (response DeletePermission404JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermission500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeletePermission500JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPermissionRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	UserId    UserId    `json:"user_id"`
}

type GetPermissionResponseObject interface {
	VisitGetPermissionResponse(w http.ResponseWriter) error
}

type GetPermission200JSONResponse ProjectPermission

func (response GetPermission200JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPermission400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetPermission400JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPermission404JSONResponse ErrorResponse

func (response GetPermission404JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPermission500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPermission500JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermissionRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	UserId    UserId    `json:"user_id"`
	Body      *CreatePermissionJSONRequestBody
}

type CreatePermissionResponseObject interface {
	VisitCreatePermissionResponse(w http.ResponseWriter) error
}

type CreatePermission200JSONResponse ProjectPermission

func (response CreatePermission200JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response CreatePermission400JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission404JSONResponse ErrorResponse

func (response CreatePermission404JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission422JSONResponse ErrorResponse

func (response CreatePermission422JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreatePermission500JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermissionRequestObject struct {
	ProjectId ProjectId `json:"project_id"`
	UserId    UserId    `json:"user_id"`
	Body      *UpdatePermissionJSONRequestBody
}

type UpdatePermissionResponseObject interface {
	VisitUpdatePermissionResponse(w http.ResponseWriter) error
}

type UpdatePermission200JSONResponse ProjectPermission

func (response UpdatePermission200JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response UpdatePermission400JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission404JSONResponse ErrorResponse

func (response UpdatePermission404JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission422JSONResponse ErrorResponse

func (response UpdatePermission422JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdatePermission500JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllProjectsRequestObject struct {
	Params GetAllProjectsParams
}

type GetAllProjectsResponseObject interface {
	VisitGetAllProjectsResponse(w http.ResponseWriter) error
}

type GetAllProjects200JSONResponse []Project

func (response GetAllProjects200JSONResponse) VisitGetAllProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllProjects400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetAllProjects400JSONResponse) VisitGetAllProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllProjects404JSONResponse ErrorResponse

func (response GetAllProjects404JSONResponse) VisitGetAllProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllProjects500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAllProjects500JSONResponse) VisitGetAllProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRequestObject struct {
	Body *CreateProjectJSONRequestBody
}

type CreateProjectResponseObject interface {
	VisitCreateProjectResponse(w http.ResponseWriter) error
}

type CreateProject200JSONResponse ProjectDetails

func (response CreateProject200JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProject400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response CreateProject400JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProject422JSONResponse ErrorResponse

func (response CreateProject422JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateProject500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateProject500JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete a code system by ID
	// (DELETE /code-system/{code-system_id})
	DeleteCodeSystem(ctx context.Context, request DeleteCodeSystemRequestObject) (DeleteCodeSystemResponseObject, error)
	// Get a code system by ID
	// (GET /code-system/{code-system_id})
	GetCodeSystem(ctx context.Context, request GetCodeSystemRequestObject) (GetCodeSystemResponseObject, error)
	// Update a code system by ID
	// (PUT /code-system/{code-system_id})
	UpdateCodeSystem(ctx context.Context, request UpdateCodeSystemRequestObject) (UpdateCodeSystemResponseObject, error)
	// Get all concepts for a code system by ID
	// (GET /code-system/{code-system_id}/concepts)
	GetAllConcepts(ctx context.Context, request GetAllConceptsRequestObject) (GetAllConceptsResponseObject, error)
	// Find a concept by code or meaning
	// (GET /code-system/{code-system_id}/find-concept)
	FindConceptByCode(ctx context.Context, request FindConceptByCodeRequestObject) (FindConceptByCodeResponseObject, error)
	// Get all code systems
	// (GET /code-systems)
	GetAllCodeSystems(ctx context.Context, request GetAllCodeSystemsRequestObject) (GetAllCodeSystemsResponseObject, error)
	// Create a new code system
	// (POST /code-systems)
	CreateCodeSystem(ctx context.Context, request CreateCodeSystemRequestObject) (CreateCodeSystemResponseObject, error)
	// Check if the server is running
	// (GET /ping)
	Ping(ctx context.Context, request PingRequestObject) (PingResponseObject, error)
	// Delete a project
	// (DELETE /project/{project_id})
	DeleteProject(ctx context.Context, request DeleteProjectRequestObject) (DeleteProjectResponseObject, error)
	// Get project details
	// (GET /project/{project_id})
	GetProject(ctx context.Context, request GetProjectRequestObject) (GetProjectResponseObject, error)
	// Update the project information
	// (PUT /project/{project_id})
	UpdateProject(ctx context.Context, request UpdateProjectRequestObject) (UpdateProjectResponseObject, error)
	// Get all code system roles for a project
	// (GET /project/{project_id}/code-system-roles)
	GetAllCodeSystemRoles(ctx context.Context, request GetAllCodeSystemRolesRequestObject) (GetAllCodeSystemRolesResponseObject, error)
	// Get a code system role by ID
	// (GET /project/{project_id}/code-system-roles/{code-system-role_id})
	GetCodeSystemRole(ctx context.Context, request GetCodeSystemRoleRequestObject) (GetCodeSystemRoleResponseObject, error)
	// Update a code system role by ID
	// (PUT /project/{project_id}/code-system-roles/{code-system-role_id})
	UpdateCodeSystemRole(ctx context.Context, request UpdateCodeSystemRoleRequestObject) (UpdateCodeSystemRoleResponseObject, error)
	// Delete a mapping and its elements by ID
	// (DELETE /project/{project_id}/mapping/{mapping_id})
	DeleteMapping(ctx context.Context, request DeleteMappingRequestObject) (DeleteMappingResponseObject, error)
	// Get a mapping with its elements by ID
	// (GET /project/{project_id}/mapping/{mapping_id})
	GetMapping(ctx context.Context, request GetMappingRequestObject) (GetMappingResponseObject, error)
	// Get all mappings for a project by project ID
	// (GET /project/{project_id}/mappings)
	GetAllMappings(ctx context.Context, request GetAllMappingsRequestObject) (GetAllMappingsResponseObject, error)
	// Create a new mapping for a project
	// (POST /project/{project_id}/mappings)
	CreateMapping(ctx context.Context, request CreateMappingRequestObject) (CreateMappingResponseObject, error)
	// Update a mapping and its elements by their concept IDs
	// (PUT /project/{project_id}/mappings)
	UpdateMapping(ctx context.Context, request UpdateMappingRequestObject) (UpdateMappingResponseObject, error)
	// Get permissions for a project
	// (GET /project/{project_id}/permissions)
	GetAllPermissions(ctx context.Context, request GetAllPermissionsRequestObject) (GetAllPermissionsResponseObject, error)
	// Delete a project permission for a user
	// (DELETE /project/{project_id}/permissions/{user_id})
	DeletePermission(ctx context.Context, request DeletePermissionRequestObject) (DeletePermissionResponseObject, error)
	// Get project permission for a specific user
	// (GET /project/{project_id}/permissions/{user_id})
	GetPermission(ctx context.Context, request GetPermissionRequestObject) (GetPermissionResponseObject, error)
	// Create a new project permission for user
	// (POST /project/{project_id}/permissions/{user_id})
	CreatePermission(ctx context.Context, request CreatePermissionRequestObject) (CreatePermissionResponseObject, error)
	// Update a project permission for a user
	// (PUT /project/{project_id}/permissions/{user_id})
	UpdatePermission(ctx context.Context, request UpdatePermissionRequestObject) (UpdatePermissionResponseObject, error)
	// Get all projects
	// (GET /projects)
	GetAllProjects(ctx context.Context, request GetAllProjectsRequestObject) (GetAllProjectsResponseObject, error)
	// Create a new project
	// (POST /projects)
	CreateProject(ctx context.Context, request CreateProjectRequestObject) (CreateProjectResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DeleteCodeSystem operation middleware
func (sh *strictHandler) DeleteCodeSystem(ctx *gin.Context, codeSystemId CodeSystemId) {
	var request DeleteCodeSystemRequestObject

	request.CodeSystemId = codeSystemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCodeSystem(ctx, request.(DeleteCodeSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCodeSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCodeSystemResponseObject); ok {
		if err := validResponse.VisitDeleteCodeSystemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCodeSystem operation middleware
func (sh *strictHandler) GetCodeSystem(ctx *gin.Context, codeSystemId CodeSystemId) {
	var request GetCodeSystemRequestObject

	request.CodeSystemId = codeSystemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCodeSystem(ctx, request.(GetCodeSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCodeSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCodeSystemResponseObject); ok {
		if err := validResponse.VisitGetCodeSystemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCodeSystem operation middleware
func (sh *strictHandler) UpdateCodeSystem(ctx *gin.Context, codeSystemId CodeSystemId) {
	var request UpdateCodeSystemRequestObject

	request.CodeSystemId = codeSystemId

	var body UpdateCodeSystemJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCodeSystem(ctx, request.(UpdateCodeSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCodeSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateCodeSystemResponseObject); ok {
		if err := validResponse.VisitUpdateCodeSystemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllConcepts operation middleware
func (sh *strictHandler) GetAllConcepts(ctx *gin.Context, codeSystemId CodeSystemId, params GetAllConceptsParams) {
	var request GetAllConceptsRequestObject

	request.CodeSystemId = codeSystemId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllConcepts(ctx, request.(GetAllConceptsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllConcepts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllConceptsResponseObject); ok {
		if err := validResponse.VisitGetAllConceptsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindConceptByCode operation middleware
func (sh *strictHandler) FindConceptByCode(ctx *gin.Context, codeSystemId CodeSystemId, params FindConceptByCodeParams) {
	var request FindConceptByCodeRequestObject

	request.CodeSystemId = codeSystemId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindConceptByCode(ctx, request.(FindConceptByCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindConceptByCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(FindConceptByCodeResponseObject); ok {
		if err := validResponse.VisitFindConceptByCodeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllCodeSystems operation middleware
func (sh *strictHandler) GetAllCodeSystems(ctx *gin.Context) {
	var request GetAllCodeSystemsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllCodeSystems(ctx, request.(GetAllCodeSystemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllCodeSystems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllCodeSystemsResponseObject); ok {
		if err := validResponse.VisitGetAllCodeSystemsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCodeSystem operation middleware
func (sh *strictHandler) CreateCodeSystem(ctx *gin.Context) {
	var request CreateCodeSystemRequestObject

	var body CreateCodeSystemJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCodeSystem(ctx, request.(CreateCodeSystemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCodeSystem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateCodeSystemResponseObject); ok {
		if err := validResponse.VisitCreateCodeSystemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Ping operation middleware
func (sh *strictHandler) Ping(ctx *gin.Context) {
	var request PingRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ping(ctx, request.(PingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PingResponseObject); ok {
		if err := validResponse.VisitPingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProject operation middleware
func (sh *strictHandler) DeleteProject(ctx *gin.Context, projectId ProjectId) {
	var request DeleteProjectRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProject(ctx, request.(DeleteProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteProjectResponseObject); ok {
		if err := validResponse.VisitDeleteProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProject operation middleware
func (sh *strictHandler) GetProject(ctx *gin.Context, projectId ProjectId) {
	var request GetProjectRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProject(ctx, request.(GetProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectResponseObject); ok {
		if err := validResponse.VisitGetProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProject operation middleware
func (sh *strictHandler) UpdateProject(ctx *gin.Context, projectId ProjectId) {
	var request UpdateProjectRequestObject

	request.ProjectId = projectId

	var body UpdateProjectJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProject(ctx, request.(UpdateProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateProjectResponseObject); ok {
		if err := validResponse.VisitUpdateProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllCodeSystemRoles operation middleware
func (sh *strictHandler) GetAllCodeSystemRoles(ctx *gin.Context, projectId ProjectId) {
	var request GetAllCodeSystemRolesRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllCodeSystemRoles(ctx, request.(GetAllCodeSystemRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllCodeSystemRoles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllCodeSystemRolesResponseObject); ok {
		if err := validResponse.VisitGetAllCodeSystemRolesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCodeSystemRole operation middleware
func (sh *strictHandler) GetCodeSystemRole(ctx *gin.Context, projectId ProjectId, codeSystemRoleId CodeSystemRoleId) {
	var request GetCodeSystemRoleRequestObject

	request.ProjectId = projectId
	request.CodeSystemRoleId = codeSystemRoleId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCodeSystemRole(ctx, request.(GetCodeSystemRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCodeSystemRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCodeSystemRoleResponseObject); ok {
		if err := validResponse.VisitGetCodeSystemRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCodeSystemRole operation middleware
func (sh *strictHandler) UpdateCodeSystemRole(ctx *gin.Context, projectId ProjectId, codeSystemRoleId CodeSystemRoleId) {
	var request UpdateCodeSystemRoleRequestObject

	request.ProjectId = projectId
	request.CodeSystemRoleId = codeSystemRoleId

	var body UpdateCodeSystemRoleJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCodeSystemRole(ctx, request.(UpdateCodeSystemRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCodeSystemRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateCodeSystemRoleResponseObject); ok {
		if err := validResponse.VisitUpdateCodeSystemRoleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMapping operation middleware
func (sh *strictHandler) DeleteMapping(ctx *gin.Context, projectId ProjectId, mappingId MappingId) {
	var request DeleteMappingRequestObject

	request.ProjectId = projectId
	request.MappingId = mappingId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMapping(ctx, request.(DeleteMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMapping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteMappingResponseObject); ok {
		if err := validResponse.VisitDeleteMappingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMapping operation middleware
func (sh *strictHandler) GetMapping(ctx *gin.Context, projectId ProjectId, mappingId MappingId) {
	var request GetMappingRequestObject

	request.ProjectId = projectId
	request.MappingId = mappingId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMapping(ctx, request.(GetMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMapping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMappingResponseObject); ok {
		if err := validResponse.VisitGetMappingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllMappings operation middleware
func (sh *strictHandler) GetAllMappings(ctx *gin.Context, projectId ProjectId, params GetAllMappingsParams) {
	var request GetAllMappingsRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllMappings(ctx, request.(GetAllMappingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllMappings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllMappingsResponseObject); ok {
		if err := validResponse.VisitGetAllMappingsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateMapping operation middleware
func (sh *strictHandler) CreateMapping(ctx *gin.Context, projectId ProjectId) {
	var request CreateMappingRequestObject

	request.ProjectId = projectId

	var body CreateMappingJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMapping(ctx, request.(CreateMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMapping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateMappingResponseObject); ok {
		if err := validResponse.VisitCreateMappingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateMapping operation middleware
func (sh *strictHandler) UpdateMapping(ctx *gin.Context, projectId ProjectId) {
	var request UpdateMappingRequestObject

	request.ProjectId = projectId

	var body UpdateMappingJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMapping(ctx, request.(UpdateMappingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMapping")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateMappingResponseObject); ok {
		if err := validResponse.VisitUpdateMappingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllPermissions operation middleware
func (sh *strictHandler) GetAllPermissions(ctx *gin.Context, projectId ProjectId) {
	var request GetAllPermissionsRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllPermissions(ctx, request.(GetAllPermissionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllPermissions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllPermissionsResponseObject); ok {
		if err := validResponse.VisitGetAllPermissionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePermission operation middleware
func (sh *strictHandler) DeletePermission(ctx *gin.Context, projectId ProjectId, userId UserId) {
	var request DeletePermissionRequestObject

	request.ProjectId = projectId
	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePermission(ctx, request.(DeletePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeletePermissionResponseObject); ok {
		if err := validResponse.VisitDeletePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPermission operation middleware
func (sh *strictHandler) GetPermission(ctx *gin.Context, projectId ProjectId, userId UserId) {
	var request GetPermissionRequestObject

	request.ProjectId = projectId
	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPermission(ctx, request.(GetPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPermissionResponseObject); ok {
		if err := validResponse.VisitGetPermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePermission operation middleware
func (sh *strictHandler) CreatePermission(ctx *gin.Context, projectId ProjectId, userId UserId) {
	var request CreatePermissionRequestObject

	request.ProjectId = projectId
	request.UserId = userId

	var body CreatePermissionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePermission(ctx, request.(CreatePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePermissionResponseObject); ok {
		if err := validResponse.VisitCreatePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePermission operation middleware
func (sh *strictHandler) UpdatePermission(ctx *gin.Context, projectId ProjectId, userId UserId) {
	var request UpdatePermissionRequestObject

	request.ProjectId = projectId
	request.UserId = userId

	var body UpdatePermissionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePermission(ctx, request.(UpdatePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdatePermissionResponseObject); ok {
		if err := validResponse.VisitUpdatePermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllProjects operation middleware
func (sh *strictHandler) GetAllProjects(ctx *gin.Context, params GetAllProjectsParams) {
	var request GetAllProjectsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllProjects(ctx, request.(GetAllProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllProjects")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllProjectsResponseObject); ok {
		if err := validResponse.VisitGetAllProjectsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProject operation middleware
func (sh *strictHandler) CreateProject(ctx *gin.Context) {
	var request CreateProjectRequestObject

	var body CreateProjectJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProject(ctx, request.(CreateProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateProjectResponseObject); ok {
		if err := validResponse.VisitCreateProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
